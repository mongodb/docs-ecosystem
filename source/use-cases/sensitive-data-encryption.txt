=========================
Sensitive Data Encryption
=========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Introduction
------------

Many applications make use of sensitive data such as confidential
personal details, payment information, or proprietary data. In some
jurisdictions, this type of data is subject to governance, privacy, and
security compliance mandates. Unauthorized access of sensitive data or a
failure to comply with a mandate often results in significant reputation
damage and financial penalties. Therefore, it is important to keep
sensitive data secure.

MongoDB offers several methods that protect your data from unauthorized
access including:

* `Role-based access control <https://docs.mongodb.com/manual/core/authorization/>`_
* `Monitoring and logging <https://docs.mongodb.com/manual/core/auditing/>`_
* `TLS/SSL network transport encryption <https://docs.mongodb.com/manual/core/security-transport-encryption/>`_
* `Encryption at rest <https://docs.mongodb.com/manual/core/security-encryption-at-rest/>`_

Another MongoDB feature that prevents unauthorized access of data is
:manual:`Client-Side Field Level Encryption (CSFLE) </core/security-client-side-encryption/>`.
This feature allows a developer to selectively encrypt individual fields
of a document on the client-side before it is sent to the server. This
keeps the encrypted data private from the providers hosting the database
as well as any user that has direct access to the database.

This guide provides steps for setup and implementation of CSFLE with a
practical example.

.. note::
   
   Automatic Client-Side Field Level Encryption is available starting in
   MongoDB 4.2 Enterprise only.

Problem
~~~~~~~

In this scenario, we secure sensitive data on a Medical Care Management
System which stores patients' personal information, insurance
information, and medical records for a fictional company, *MedcoMD*.
None of the patient data is public, and certain data such as their
social security number (SSN), insurance policy number, and vital sign
measurements are particularly sensitive and subject to privacy
compliance. It is important for the company and the patient that the
data is kept private and secure.

MedcoMD needs this system to satisfy the following use cases:

- Doctors use the system to access Patients' medical records, insurance
  information, and add new vital sign measurements.

- Receptionists use the system to verify the Patients' identity, using a
  combination of their contact information and the last four digits of
  their Social Security Number (SSN).

- Receptionists can view a Patient's insurance policy provider, but not
  their policy number.

- Receptionists cannot access a Patient's medical records.

MedcoMD is also concerned with disclosure of sensitive data through any
of the following methods:

- Accidental disclosure of data on the Receptionist's publicly-viewable
  screen.

- Direct access to the database by a superuser such as a database
  administrator.

- Capture of data over an insecure network.

- Access to the data by reading a server's memory.

- Access to the on-disk data by reading database or backup files.

What can MedcoMD do to balance the functionality and access restrictions
of their Medical Care Management System?

Solution
~~~~~~~~

The MedcoMD engineers review the Medical Care Management System
specification and research the proper solution for limiting access to
sensitive data.

The first MongoDB security feature they evaluated was :manual:`Role-Based Access
Control </core/authorization/>` which
allows administrators to grant and restrict collection-level permissions
for users. With the appropriate role definition and assignment, this
solution prevents accidental disclosure of data and access. However, it
does not prevent capture of the data over an insecure network, direct
access of data by a superuser, access to data by reading the server's
memory, or access to on-disk data by reading the database or backup
files.

The next MongoDB security features they evaluated were :manual:`Encryption at
Rest
</core/security-encryption-at-rest/>`
which encrypts the database files on disk and :manual:`Transport Encryption
using TLS/SSL
</core/security-transport-encryption/>`
which encrypts data over the network. When applied together, these two
features prevent access to on-disk database files as well as capture of
the data on the network, respectively. When combined with Role-Based
Access Control, these three security features offer near-comprehensive
security coverage of the sensitive data, but lack a mechanism to prevent
the data from being read from the server's memory.

Finally, the MedcoMD engineers discovered a feature that independently
satisfies all the security criteria. Client-side Field Level Encryption
allows the engineers to specify the fields of a document that should be
kept encrypted. Sensitive data is transparently encrypted/decrypted by
the client and only communicated to and from the server in encrypted
form. This mechanism keeps the specified data fields secure in encrypted
form on both the server and the network. While all clients have access
to the non-sensitive data fields, only appropriately-configured CSFLE
clients are able to read and write the sensitive data fields.

MedcoMD will provide Receptionists with a client that is not configured
to access data encrypted with CSFLE. This will prevent them from viewing
the sensitive fields and accidentally leaving them displayed on-screen
in a public area. MedcoMD will provide Doctors with a client with CSFLE
enabled which will allow them to access the sensitive data fields in the
privacy of their own office.

Equipped with CSFLE, MedcoMD can keep their sensitive data secure and
compliant to data privacy regulations with MongoDB.

Procedure
---------

.. tabs-drivers::
   
   .. tab::
      :tabid: java-sync
      
      For more information, including full examples, see the `Client
      Side Encryption
      <https://mongodb.github.io/mongo-java-driver/3.11/driver/tutorials/client-side-encryption/>`_
      page in the official Java driver documentation.
      

Requirements
~~~~~~~~~~~~

MongoDB Server 4.2 Enterprise
  - For installation instructions, refer to the
    :manual:`Enterprise Edition Installation Tutorials </installation/#mongodb-enterprise-edition-installation-tutorials>`.

MongoDB Driver Compatible with CSFLE
  - For a list of drivers that support CSFLE, refer to the
    :manual:`driver compatibility table </core/security-client-side-encryption/#driver-compatibility-table>`.

AWS Key Management Service (KMS)
  - The client application will need the following AWS KMS permissions
    for the master key:

    - :aws-docs:`Encrypt <kms/latest/APIReference/API_Encrypt.html>`
    - :aws-docs:`Decrypt <kms/latest/APIReference/API_Decrypt.html>`

    To learn how to create an IAM user and assign these permissions, see
    :aws-docs:`AWS IAM Users </IAM/latest/UserGuide/id_users.html>` .

  - Compatible MongoDB drivers currently include integration with AWS
    KMS. Support for other KMS providers may be added in the future.

File System Permissions
  - The client application or a privileged user needs permissions to
    start the :manual:`mongocryptd
    </core/security-client-side-encryption/#field-level-encryption-mongocryptd>`
    process on the host.

.. _fle-create-a-master-key:

A. Create a Master Key
~~~~~~~~~~~~~~~~~~~~~~

MongoDB :manual:`Client-Side Field Level Encryption (CSFLE)
</core/security-client-side-encryption/>`
uses an encryption strategy called *envelope encryption* in which keys
used to encrypt/decrypt data (called **data encryption keys**) are
encrypted with another key (called the **master key**). For more
information on the features of envelope encryption and key management
concepts, see `AWS Key Management Service Concepts
<https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#enveloping>`_.

The master key, used by the MongoDB driver to create and encrypt data
keys, should be stored remotely in a :wikipedia:`Key Management System
<Key_management#Key_management_system>`. The data encryption keys,
generated and used by the MongoDB driver to encrypt and decrypt document
fields, are stored in a key vault collection in the same database as the
encrypted data.

To begin development, MedcoMD engineers generate a locally-managed master key:

.. tabs-drivers::
   
   .. tab::
      :tabid: java-sync
      
      The following script generates a 96-byte locally-managed master key and
      saves it to a file called ``master-key.txt`` in the directory
      from which the script is executed.
      
      .. code-block:: java
      
        import java.io.FileOutputStream;
        import java.io.IOException;
        import java.security.SecureRandom;
      
        public class CreateMasterKeyFile {
          public static void main(final String[] args) {
      
            final byte[] localMasterKey = new byte[96];
            new SecureRandom().nextBytes(localMasterKey);
      
            try (FileOutputStream stream = new FileOutputStream("master-key.txt")) {
              stream.write(localMasterKey);
            } catch (IOException e)  {
              e.printStackTrace();
            }
          }
        }

.. _fle-create-a-data-encryption-key:

B. Create a Data Encryption Key
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In this section, we generate a data encryption key. The MongoDB driver
stores the key in a key vault collection where CSFLE-enabled clients can
access the key for automatic encryption and decryption.

The client requires the following configuration values to generate a new
data encryption key:

- The locally-managed master key or AWS KMS master key access settings.

- A MongoDB connection string that authenticates on a running server.

- The key vault namespace (database and collection).

Follow the steps below to generate a single data encryption key from the
locally-managed master key.

.. tabs-drivers::
   :hidden: true
   
   .. tab::
      :tabid: java-sync
       
      You can also download the `complete code example
      <https://raw.githubusercontent.com/mongodb/docs-assets/DOCSP-json-schema-helper-and-json/DataEncryptionKeyGenerator.java>`_.

.. include:: /includes/steps/fle-create-data-encryption-key.rst

.. _fle-define-a-json-schema:

C. Define a JSON Schema
~~~~~~~~~~~~~~~~~~~~~~~

`JSON Schema <http://json-schema.org/>`_ is a vocabulary that allows you
to annotate and validate JSON documents. MongoDB drivers use an extended
version of the JSON Schema standard to configure automatic client-side
encryption and decryption of specific fields of the documents in a
collection. The extended MongoDB CSFLE standard requires the following
information:

- The encryption algorithm to use when encrypting each field
  (:manual:`Deterministic Encryption
  </core/security-client-side-encryption#deterministic-encryption>` or
  :manual:`Random Encryption
  </core/security-client-side-encryption#random-encryption>`)

- One or more data encryption keys encrypted with the CSFLE master key

- The BSON Type of each field (only required for deterministically
  encrypted fields)

.. admonition::Automatic Client-Side Field Level Encryption JSON Schema Does Not Support Document Validation
   :important:
   
   MongoDB drivers only use JSON Schema syntax to configure automatic
   client-side field level encryption and support *only* field-level
   encryption-specific keywords documented in :manual:`Automatic Encryption
   JSON Schema Syntax </reference/security-client-side-automatic-json-schema/>`.
   Any other document validation instances will cause the client to throw
   an error.

The MedcoMD engineers receive specific requirements for the fields of
data and their encryption strategies. The following table illustrates
the data model of the Medco Management System.

.. list-table::
   :header-rows: 1

   * - Field type
     - Encryption Algorithm
     - BSON Type
   
   * - Name
     - Non-Encrypted
     - String
   
   * - SSN
     - Deterministic
     - Int
   
   * - Blood Type
     - Random
     - String
   
   * - Medical Records
     - Random
     - Array
   
   * - Insurance: Policy Number
     - Deterministic
     - Int (embedded inside `insurance` object)
   
   * - Insurance: Provider
     - Non-Encrypted
     - String (embedded inside `insurance` object)

Data Encryption Key
+++++++++++++++++++

The MedcoMD engineers created a single data key to use when encrypting
all fields in the data model. To configure this, they specify the
:manual:`encryptMetadata
</reference/security-client-side-automatic-json-schema/#encryptmetadata-schema-keyword>`
key at the root level of the JSON Schema. As a result, all encrypted
fields defined in the `properties` field of the schema will inherit this
encryption key unless specifically overwritten.

.. code-block:: javascript
   
   {
       "bsonType" : "object",
       "encryptMetadata" : {
           "keyId" : // copy and paste your keyID generated here
       },
       "properties": {
           // copy and paste your field schemas here
       }
   }

MedcoMD engineers create JSON objects for each field and append them to
the `properties` map.

SSN
+++

The ``ssn`` field represents the patient's social security number. This
field is sensitive and should be encrypted. MedcoMD engineers decide
upon deterministic encryption based on the following properties:

- Queryable
- High cardinality

.. code-block:: json

    "ssn": {
        "encrypt": {
            "bsonType": "int",
            "algorithm": "AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic"
        }
    }



Blood Type
++++++++++

The ``bloodType`` field represents the patient's blood type. This field
is sensitive and should be encrypted. MedcoMD engineers decide upon
random encryption based on the following properties:

- No plans to query
- Low cardinality

.. code-block:: json

    "bloodType": {
        "encrypt": {
            "bsonType": "string",
            "algorithm": "AEAD_AES_256_CBC_HMAC_SHA_512-Random"
        }
    }


Medical Records
+++++++++++++++

The ``medicalRecords`` field is an array that contains a set of medical
record documents. Each medical record document represents a separate
visit and specifies information about the patient at that that time,
such as their blood pressure, weight, and heart rate. This field is
sensitive and should be encrypted. MedcoMD engineers decide upon random
encryption based on the following properties:

- Array fields must use random encryption with CSFLE to enable
  auto-encryption

.. code-block:: json

    "medicalRecords": {
        "encrypt": {
            "bsonType": "array",
            "algorithm": "AEAD_AES_256_CBC_HMAC_SHA_512-Random"
        }
    }

Insurance Policy Number
+++++++++++++++++++++++

The ``insurance.policyNumber`` field is embedded inside the
``insurance`` field and represents the patient's policy number. This
policy number is a distinct and sensitive field. MedcoMD engineers
decide upon deterministic encryption based on the following properties:

- Queryable
- High cardinality

.. code-block:: json

    "insurance": {
        "bsonType": "object",
        "properties": {
            "policyNumber": {
                "encrypt": {
                    "bsonType": "int",
                    "algorithm": "AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic"
                }
            }
        }
    }


Recap
+++++

MedcoMD engineers created a JSON Schema that satisfies their
requirements of making sensitive data queryable and secure. View the
full `JSON Schema for the Medco Medical Management System
<https://raw.githubusercontent.com/mongodb/docs-assets/DOCSP-json-schema-helper-and-json/MedcoMDSchema.json>`_.


.. tabs-drivers::
   
   .. tab::
      :tabid: java-sync
       
      View the `helper code in Java
      <https://raw.githubusercontent.com/mongodb/docs-assets/DOCSP-json-schema-helper-and-json/JSONSchemaCreator.java>`_.

D. Create the MongoDB Client
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The MedcoMD engineers now have the necessary encyption keys and JSON
Schema configuration to create a CSFLE-enabled client. They use the
following procedure to configure and instantiate the MongoDB client:

.. include:: /includes/steps/fle-configure-the-mongodb-client.rst

E. Perform Encrypted Read/Write Operations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The MedcoMD engineers now have a CSFLE-enabled client and can test that
the client can perform queries that meet the requirements. Doctors
should be able to read and write to all fields, and receptionists should
only be allowed to read and write to non-sensitive fields.

Insert a Document with Encrypted Fields
+++++++++++++++++++++++++++++++++++++++

MedcoMD engineers write a function to create a new patient record:

.. tabs-drivers::
   
   .. tab::
      :tabid: java-sync
      
      .. code-block:: java
      
         public static void insertPatient(
             MongoCollection collection,
             String name,
             int ssn,
             String bloodType,
             ArrayList<Document> medicalRecords,
             int policyNumber,
             String provider
         ) {
             Document patient = new Document()
                 .append("name", name)
                 .append("ssn", ssn)
                 .append("bloodType", bloodType)
                 .append("medicalRecords", medicalRecords);
             Document insurance = new Document()
                 .append("policyNumber", policyNumber)
                 .append("provider", provider)
                 .append("insurance", insurance);
             collection.insertOne(patient);
         }

When a CSFLE-enabled client inserts a new patient record into the Medical Care
Management System, it automatically encrypts the fields specified in the
JSON Schema. This operation creates a document similar to the following:

.. code-block:: json

    {
        "_id": "5d7a7bbe6d58fd263b6d7315",
        "name": "Jon Doe",
        "ssn": "Ac+ZbPM+sk7gl7CJCcIzlRAQUJ+uo/0WhqX+KbTNdhqCszHucqXNiwqEUjkGlh7gK8pm2JhIs/P3//nkVP0dWu8pSs6TJnpfUwRjPfnI0TURzQ==",
        "bloodType": "As+ZbPM+sk7gl7CJCcIzlRACESwHCTCtK/lQV9kF6/LRoL3mh59gzBVA42vGBVfLIycYWpfAy7ZCi2eRGEgMX5CrGl259Wfu6Zf/ELBVqQDnyQ==",
        "medicalRecords": "As+ZbPM+sk7gl7CJCcIzlRAEFt249toVYOlvlC/79cAtQ5jvE/ukF1ZLxRZn1g0zBBtPnf6L0AFTKMVdNJnjMGPMTszYU58qRE9uMvCU05DVHYl8DJnbtGXXFRLJ7ElQOc=",
        "insurance": {
            "provider": "MaestCare",
            "policyNumber": "Ac+ZbPM+sk7gl7CJCcIzlRAQm7kFhN1hy3l7Wt3BSpBMbvVSuiaDsf3UPF9bvJLTEcC+Ka+3kZI4SVZinj4tyc5uDYeyh6+7phpKrQo4CHWyg=="
        }
    }

.. note::
   
   Clients that do not have CSFLE configured will insert unencrypted data. We
   recommend using :manual:`server-side schema validation </core/schema-validation/>`
   to enforce encrypted writes for fields that should be encrypted.

Query for Documents on a Deterministically Encrypted Field
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Queries on encrypted fields can be done using traditional MongoDB driver
methods as well. When a query is made using a client configured to use
CSFLE, such as when a doctor in the MedcoMD management system searches
for a patient with their SSN, the patient's data is returned
unencrypted:

.. code-block:: json

    {
        "_id": "5d6ecdce70401f03b27448fc",
        "name": "Jon Doe",
        "ssn": 241014209,
        "bloodType": "AB+",
        "medicalRecords": [
            {
                "weight": 180,
                "bloodPressure": "120/80"
            }
        ],
        "insurance": {
            "provider": "MaestCare",
            "policyNumber": 123142
        }
    }


.. note::
   
   For queries using a client that is not configured to use CSFLE, such
   as when receptionists in the MedcoMD management system search for a
   patient with their ``ssn``, a null value is returned. A client without CSFLE
   configured cannot query on a sensitive field.

Query for Documents on a Randomly Encrypted Field
+++++++++++++++++++++++++++++++++++++++++++++++++

.. warning::
   
   You cannot directly query for documents on a randomly encrypted
   field, however you can use another field to find the document that
   contains an approximation of the randomly encrypted field data.

MedcoMD engineers determined that the fields they randomly encrypted
would not be used to find patients records. Had this been required, for example,
if the patient's ``ssn`` was randomly encrypted, MedcoMD engineers
could have included another plaintext field called ``last4ssn`` that
contains the last 4 digits of the ``ssn`` field. They could then query
on this field as a proxy for the ``ssn``.

.. code-block:: json
   :emphasize-lines: 5

    {
        "_id": "5d6ecdce70401f03b27448fc",
        "name": "Jon Doe",
        "ssn": 241014209,
        "last4ssn": 4209,
        "bloodType": "AB+",
        "medicalRecords": [
            {
                "weight": 180,
                "bloodPressure": "120/80"
            }
        ],
        "insurance": {
            "provider": "MaestCare",
            "policyNumber": 123142
        }
    }
 
.. _fle-convert-to-a-remote-master-key:

F. Convert to a Remote Master Key
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

MedcoMD is confident that they have set up their application correctly
to use CSFLE. Now, they want to take the app to a production-ready
state. They used a locally-managed master key in development but for production
they need to use a remote Key Management Service.

MedcoMD converts their application to use AWS KMS with the following
procedure:

.. include:: /includes/steps/fle-convert-to-a-remote-master-key.rst

Recap
~~~~~

After following the procedure, MedcoMD engineers have converted the
application to use a remote master key. They used the master key to
generate a new data key and updated the JSON schema with that data key.

The MedcoMD engineers are now confident that they have a
production-ready, CSFLE-enabled client.

Summary
-------

MedcoMD wanted to develop a system that securely stores sensitive
medical records for their patients. They also wanted strong data access
and security guarantees that do not rely on individual users. After
researching the available options, MedcoMD determined that MongoDB
Client-Side Field Level Encryption satisfies their requirements and
decided to implement it in their application. To implement CSFLE they:

**1. Created a Locally-Managed Master Encryption Key**

A locally-managed master key allowed MedcoMD to rapidly develop the client
application without external dependencies and avoid accidentally leaking
sensitive production credentials.

**2. Generated an Encrypted Data Key with the Master Key**

CSFLE uses envelope encryption, so they generated a data key that
encrypts and decrypts each field and then encrypted the data key using a
master key. This allows MedcoMD to store the encrypted data key in
MongoDB so that it is shared with all clients while preventing access to
clients that don't have access to the master key.

**3. Created a JSON Schema**

CSFLE can automatically encrypt and decrypt fields based on a provided
JSON Schema that specifies which fields to encrypt and how to encrypt
them.

**4. Tested and Validated Queries with the CSFLE Client**

MedcoMD engineers tested their CSFLE implementation by inserting and
querying documents with encrypted fields. They then validated that
clients without CSFLE enabled could not read the encrypted data.

**5. Took the Client to Production**

MedcoMD converted the application to use a remote a master key instead
of the locally-managed master key. They generated a new data key from the
remote master key and used it to update the JSON Schema. Once they had
the updated schema, they were ready to go to production.

For more information on client-side field level encryption in MongoDB,
check out the reference docs in the server manual:

- :manual:`Client-Side Field Level Encryption </core/security-client-side-encryption>`
- :manual:`Automatic Encryption JSON Schema Syntax </reference/security-client-side-automatic-json-schema>`
- :manual:`Manage Client-Side Encryption Data Keys </tutorial/manage-client-side-encryption-data-keys>`
