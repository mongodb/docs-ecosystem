=========================
Sensitive Data Encryption
=========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Introduction
------------

Cras sed rutrum nisi, vitae tristique risus. Aliquam erat volutpat.
Donec auctor nisl eget ornare accumsan. Pellentesque lectus tortor,
consectetur molestie pellentesque ac, blandit non libero.

Problem
~~~~~~~

Pellentesque non mi et est congue mattis pretium sit amet mi. Praesent
nec tortor nec arcu molestie dapibus. Phasellus at nunc ut quam molestie
finibus. Suspendisse finibus lectus eget nulla eleifend, vel consequat
leo rhoncus. Phasellus lacinia tortor id aliquet condimentum. Morbi
sodales est a leo rhoncus, non pretium neque dignissim.

Solution
~~~~~~~~

Praesent sit amet elit pretium mi molestie porta a sit amet ipsum. Sed
sollicitudin purus et mi blandit sodales.

- Deterministic vs Non-Deterministic

Procedure
---------

Requirements
~~~~~~~~~~~~

- Point to setup and install directions
- Nullam imperdiet lorem vitae vulputate lacinia.
- Donec eget velit tincidunt, gravida diam ac, efficitur lacus.

A. Create a Local Master Key
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Aenean eu consequat lorem. Ut posuere est sed sodales pharetra. Cras
volutpat, massa laoreet varius dictum, leo odio porttitor ante, nec
auctor tortor orci et mi. Maecenas tempor, lacus vehicula molestie
pulvinar, ante eros faucibus odio, sed consequat quam tellus vel arcu.
Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere
cubilia Curae; Nunc non interdum purus, ultricies laoreet tortor.

B. Define a JSON Schema
~~~~~~~~~~~~~~~~~~~~~~~

MongoDB uses JSON Schema to to validate data which is written to a collection.
Within the context of Field Level Encryption, we use JSON Schema to specify several
configuration details. For instance, we can specify the form of encryption we want to use 
- deterministic or random. We can also specify the BSON Type of the field we are encrypting. 
In addition, we can specify the key we want to use. This is particularly important, because
it means that we can use different keys for different fields.

In the following example, we will go over creation of a schema for a collection which represents patient data
in a medical office. Some fields use deterministic encryption, and others use random (probabilistic encryption). 

The structure for our schema will be as follows:

 .. code::

    fullName: String
    address: Encrypted String using random encryption
    ssn: Encrypted Int using deterministic encryption
    last4SSN: Int
    appointments: Object
    medicalRecords: Encrypted array of documents using random encryption

* Address randomly encrypted because it is more secure for strings to be randomly encrypted to prevent hackers from decrypting by building a cipher-dictionary
* SSN is deterministically encrypted because deterministic encryption provides filtering ability 
* Medical Records are randomly encrypted because entire array's are only encryptable with random encryption

testabc

.. tabs::

   tabs:

     - id: java-master-key-generator
      name: "Java"
      content: |

         The following code creates a collection using the schema above and inserts it into a database using MongoDB.

         .. code-block:: java

            import java.io.FileOutputStream;
            import java.io.IOException;
            import java.security.SecureRandom;

.. tabs::

   tabs:

     - id: java-master-key-generator
      name: "Java"
      content: |

         The following script generates a 96-byte local master key and saves it to a file called ``master-key.txt`` in the directory from which the script is executed.

         .. code-block:: java

           import java.io.FileOutputStream;
          import java.io.IOException;
          import java.security.SecureRandom;

           public class CreateMasterKeyFile {
            public static void main(final String[] args) {

               final byte[] localMasterKey = new byte[96];
              new SecureRandom().nextBytes(localMasterKey);

               String path = "master-key.txt";
              try (FileOutputStream stream = new FileOutputStream(path)) {
                stream.write(localMasterKey);
              } catch (IOException e)  {
                e.printStackTrace();
              }
            }
          }


C. Configure the MongoDB Client
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Donec sem felis, iaculis id pharetra sed, sollicitudin ut nisl.
Suspendisse commodo sagittis ante in ullamcorper. Etiam viverra
pellentesque suscipit. Pellentesque interdum egestas libero, ut varius
velit congue vel.

D. Perform Encrypted Read/Write Operations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Etiam hendrerit posuere justo, ac hendrerit lorem pellentesque sed.
Fusce ullamcorper neque eu libero aliquam, sed placerat sapien cursus.
Vestibulum maximus magna sed velit feugiat tempor.

Ut accumsan pellentesque metus, at porta felis dapibus vulputate. Aenean
malesuada interdum libero in feugiat. Fusce pharetra massa eget leo
varius, et gravida massa tempus.

Ut mattis eros elit, sed ultrices purus lacinia sed. Curabitur tincidunt
tellus eget neque porta dictum ac vel orci. Vestibulum ante ipsum primis
in faucibus orci luctus et ultrices posuere cubilia Curae.

Praesent feugiat arcu non risus elementum eleifend. Nullam sed iaculis
erat.

E. Convert to a Remote Master Key
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Fusce porta lectus et enim vehicula malesuada. In porttitor ipsum eu
dictum congue. Fusce pharetra sagittis lacus sed posuere. Donec porta
posuere gravida. Quisque nisi massa, condimentum vitae ligula eget,
fringilla malesuada quam. Mauris in semper nulla, non blandit tortor.
Mauris consequat eget urna at eleifend. Suspendisse potenti. Fusce at
justo malesuada, finibus felis non, dignissim nisl. Ut blandit nulla sit
amet massa euismod vehicula.

Summary
-------

- What we wanted to do
- What we did
- More reading
