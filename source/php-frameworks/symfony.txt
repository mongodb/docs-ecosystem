.. _php-symfony-integration:

===========================
Symfony MongoDB Integration
===========================

.. facet::
   :name: genre
   :values: tutorial

.. meta::
   :keywords: php framework, odm, web app

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn about the Symfony MongoDB integration and
find a tutorial on building a simple PHP web application by using this
framework. You can learn about the advantages of using Symfony to build
web applications with MongoDB as your database, as well as libraries
that you can leverage to simplify querying MongoDB.

Symfony is a flexible and highly configurable framework for building PHP
applications. You can use this framework to create reusable components
to streamline your web app.

The :ref:`php-symfony-qs` section of this guide contains a tutorial
which you can follow to build a single page app that accesses data from
a MongoDB collection.

The :ref:`php-symfony-resources` section contains links to further
learning resources and documentation.

Advantages of Using MongoDB with Symfony
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

By using MongoDB as a data store in a Symfony web application, you can
leverage the document data model to build rich query expressions,
allowing you to easily interact with data.

In your applications, you can implement the **MongoDB Doctrine ODM**,
which is an Object-Document Mapper (ODM) for MongoDB and PHP. It
provides a way to work with MongoDB in Symfony, using the same
principles as Doctrine ORM for relational databases.

MongoDB Doctrine ODM allows you to map PHP objects to MongoDB documents
and query MongoDB by using a builder API. To learn more about this
library, see the :ref:`php-symfony-resources` section.

.. _php-symfony-qs:

Quick Start
-----------

This guide shows you how to build a web application by using Symfony, a
PHP framework. You will learn how to connect to a MongoDB cluster hosted
on MongoDB Atlas and access data from your database.

By using MongoDB as a data store in a Symfony web application, you can
leverage the document data model to build rich query expressions,
allowing you to easily interact with data.

.. tip::

   If you prefer to connect to MongoDB by using the MongoDB PHP Library without
   Symfony, see `Connecting to MongoDB
   <https://www.mongodb.com/docs/php-library/current/tutorial/connecting/>`__
   in the MongoDB PHP Library documentation.

MongoDB Atlas is a fully managed cloud database service that hosts your
MongoDB deployments. You can create your own free (no credit card
required) MongoDB Atlas deployment by following the steps in this guide.

This guide uses MongoDB Doctrine ODM to allow you to map PHP objects to
MongoDB documents and query MongoDB by using a builder API. 

Follow the steps in this guide to create a sample Symfony web application
that connects to a MongoDB deployment and performs a query on the
database.

Prerequisites
~~~~~~~~~~~~~

To create the Quick Start application, you need the following software
installed in your development environment:

- `PHP <https://www.php.net/downloads>`__
- `Composer <https://getcomposer.org/doc/00-intro.md>`__
- `Symfony CLI <https://symfony.com/download>`__
- A terminal app and shell. For MacOS users, use Terminal or a similar app.
  For Windows users, use PowerShell.

.. _php-symfony-atlas-cluster:

Create a MongoDB Atlas Cluster
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You must create a MongoDB cluster where you can store and manage your
data. Complete the
:atlas:`Get Started with Atlas </getting-started>` guide to set up a new
Atlas account, create a free tier MongoDB cluster, load datasets, and
interact with the data.

After completing the steps in the Atlas guide, you have a new
MongoDB cluster deployed in Atlas, a new database user, and sample
datasets loaded into your cluster.

You pass instructions to the driver on where and how to connect to your
MongoDB cluster in a string called the connection string. To retrieve
your connection string, follow the instructions in the :atlas:`Connect
to Your Cluster </tutorial/connect-to-your-cluster/>` tutorial in the
Atlas documentation.

Save your connection string in a secure location.

Initialize a Symfony Project
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Run the following command to create a skeleton Symfony project called
``restaurants``:

.. code-block:: bash

   composer create-project symfony/skeleton restaurants

Install MongoDB Extension
~~~~~~~~~~~~~~~~~~~~~~~~~

Run the following commands to enter your project directory and install
MongoDB:

.. code-block:: bash

   cd restaurants
   pecl install mongodb

Install PHP Driver and Doctrine ODM
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Run the following commands to install the MongoDB PHP driver and the
MongoDB Doctrine ODM:

.. code-block:: bash

   composer require mongodb/mongodb
   composer require doctrine/mongodb-odm-bundle

To ensure that the Doctrine ODM is enabled in your project, verify that your
``config/bundles.php`` file contains the highlighted entry in the
following code:

.. code-block:: php
   :caption: config/bundles.php
   :emphasize-lines: 3
   
   return [
       // ...
       Doctrine\Bundle\MongoDBBundle\DoctrineMongoDBBundle::class => ['all' => true],
   ];

Configure the ODM
`````````````````

In the ``config/packages`` directory, replace the contents of your
``doctrine_mongodb.yaml`` file with the following code:

.. code-block:: yaml
   :caption: config/packages/doctrine_mongodb.yaml

   doctrine_mongodb:
       auto_generate_proxy_classes: true
       auto_generate_hydrator_classes: true
       connections:
           default:
               server: '%env(resolve:MONGODB_URI)%&appName=devrel.content.php'
               options: {}
       default_database: '%env(resolve:MONGODB_DB)%'
       document_managers:
           default:
               auto_mapping: true
               mappings:
                   App:
                       dir: '%kernel.project_dir%/src/Document'
                       mapping: true
                       type: attribute
                       prefix: 'App\Document'
                       is_bundle: false
                       alias: App

Install Frontend Dependency
~~~~~~~~~~~~~~~~~~~~~~~~~~~

This project uses ``twig``, the default template engine for Symfony, to
generate templates in this application. Run the following command to
install the ``twig`` bundle:

.. code-block::

   composer require symfony/twig-bundle

This step might result in an error message about unset environment
variables, but this is resolved in the following section.

Modify Project Files
~~~~~~~~~~~~~~~~~~~~

This section demonstrates how to modify the files in your
``restaurants`` project to create a Symfony web application that views
restaurants based on filter criteria.

Set Environment Variables
`````````````````````````

In the root directory, navigate to the ``.env`` file and define the
following environment variables or edit them if they are already present:

.. code-block:: none
   :caption: .env

   ...

   MONGODB_URI=<your Atlas connection string>
   MONGODB_DB=sample_restaurants

To retrieve your connection string, see the
:ref:`php-symfony-atlas-cluster` step.

Create Restaurant Entity and Controller
```````````````````````````````````````

Create the ``Restaurant.php`` file in the ``src/Document`` directory and
paste the following code to create an entity that represents documents in
the ``restaurants`` collection:

.. literalinclude:: /includes/php-frameworks/Restaurant.php
   :caption: src/Document/Restaurant.php
   :language: php

Next, create the ``RestaurantController.php`` file in the
``src/Controller`` directory to handle the endpoints in your
application:

.. literalinclude:: /includes/php-frameworks/RestaurantController.php
   :caption: src/Document/RestaurantController.php
   :language: php

The controller file defines the ``index()`` method, which shows some text on
the web app's front page. The file also defines the ``browse()`` method,
which finds documents that match documents in which the ``borough``
field is ``'Queens'`` and the ``name`` field contains the string ``'Moon'``.
This method then displays them at the
``/restaurant/browse/`` route. The ``browse()`` method uses the
``QueryBuilder`` class to build the query.

Specify Routes
``````````````

In the ``config/routes.yaml`` file, specify the following routes:

.. code-block:: yaml
   :caption: config/routes.yaml

   # main routes
   restaurant_index:
     path: /
     controller: App\Controller\RestaurantController::index
     methods: [GET]
   
   # browse restaurants
   restaurant_browse:
     path: /restaurant/browse
     controller: App\Controller\RestaurantController::browse
     methods: [GET]

This file sets the following routes in the application:

- ``restaurant_index [GET]``: landing page
- ``restaurant_browse [GET]``: retrieves and displays specific restaurants

Customize Templates
```````````````````

Next, create templates to customize the web app's appearance.

Create the ``templates/restaurant`` directory and populate it with the
following files:

- ``index.html.twig``
- ``browse.html.twig``

Paste the following code into the ``index.html.twig`` file:

.. code-block:: html
   :caption: templates/restaurant/index.html.twig

   {# templates/restaurant/index.html.twig #}
   
   {% extends 'base.html.twig' %}
   
   {% block body %}
       <h1>Welcome to the Symfony MongoDB Quickstart!</h1>
   {% endblock %}

Paste the following code into the ``browse.html.twig`` file:

.. code-block:: html
   :caption: templates/restaurant/browse.html.twig

   {# templates/restaurant/browse.html.twig #}
   
   {% extends 'base.html.twig' %}
   
   {% block title %}
       <h2>Search Restaurants</h2>
   {% endblock %}
   
   {% block body %}
       <h1>Search Restaurants</h1>
           {% for restaurant in restaurants %}
               <p>
                   <span style="color:green;"><b>Name: </b>{{ restaurant.name }}</span><br>
                   <b>Borough:</b> {{ restaurant.borough }}<br>
                   <b>Cuisine:</b> {{ restaurant.cuisine }}<br>
               </p>
           {% endfor %}
   {% endblock %}

Start your Symfony Application
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Run the following command from the application root directory to start
your PHP built-in web server:

.. code-block:: bash
   
   symfony server:start

After the server starts, it outputs the following message:

.. code-block:: none
   :copyable: false

   [OK] Web server listening
        The Web server is using PHP FPM 8.3.4
        http://127.0.0.1:8000

Open the URL http://127.0.0.1:8000/restaurant/browse in your web browser.
The page shows a list of restaurants and details about each of them, as
displayed in the following screenshot:

.. figure:: /includes/php-frameworks/app_render.png
   :alt: Restaurants web app screenshot

Congratulations on completing the Quick Start tutorial!

After you complete these steps, you have a Symfony web application that
connects to your MongoDB deployment, runs a query on
the sample data, and renders a retrieved result.

.. _php-symfony-resources:

Resources
---------

Learn more about Symfony and MongoDB by viewing the following resources:

- `Build PHP Symfony Apps with MongoDB Atlas Workshop
  <https://mongodb-developer.github.io/symfony-mongodb-rental-workshop/>`__
- `Symfony Documentation <https://symfony.com/doc/current/index.html>`__
- `Doctrine MongoDB ODM GitHub Repository <https://github.com/doctrine/mongodb-odm>`__
- `Doctrine ODM Documentation
  <https://www.doctrine-project.org/projects/doctrine-mongodb-odm/en/latest/index.html>`__
