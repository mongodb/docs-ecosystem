title: Create a GCP Service Account
ref: create-a-gcp-service-account
content: |
  1. Create a service account for your client application by following the
     official Google documentation on
     `Creating and managing a service account <https://cloud.google.com/iam/docs/creating-managing-service-accounts#creating>`__.

  2. After you create the service account, locate and record the following
     authentication settings for use in a later step:

     - **email**
     - **privateKey** (this value is only returned when you create the account)
     - **endpoint**

---
title: Create the Master Key
ref: create-the-master-key-gcp
content: |
  The following diagram shows the steps required to create a new
  **master key** on a KMS provider.

  .. image:: /figures/CSFLE_Master_Key_KMS.png
     :alt: Diagram that describes creating a master key when using a KMS provider

  1. To create a master key, log into your Google Cloud account and
     follow the steps in Google Cloud's official
     `Creating symmetric keys guide <https://cloud.google.com/kms/docs/creating-keys>`__
     to create a **symmetric key**.

     The master key is used by your application to encrypt and decrypt your
     **data encryption key**.

     .. note::

        If you rotate the master key, either by specifying a date or manually,
        the provider changes the content of the master key. To transition
        to the new key:

        1. Decrypt and save the data using the original data encryption key.
        #. Generate a new data encryption key with the new master key.
        #. Update the ``keyVersion`` parameter to the latest version of the master key.
        #. Re-encrypt the data using the new data encryption key.

  2. Ensure that your client application has permissions to encrypt and
     decrypt data using the key. For example, the
     `roles/cloudkms.cryptoKeyEncrypterDecrypter <https://cloud.google.com/kms/docs/reference/permissions-and-roles>`__
     role has permissions to both encrypt and decrypt keys.

     .. important::

        The client application *should not* have administrative permissions
        for the master key. We recommend that you follow the
        `principle of least privilege <https://en.wikipedia.org/wiki/Principle_of_least_privilege>`__
        to keep your data secure.

---
title: Specify your Google Cloud KMS Credentials
ref: specify-your-gcp-kms-provider-credentials
content: |
  Unlike the local key provider, the Google Cloud KMS does not read
  the master key directly from the client application. Instead,
  it retrieves the key using your service client credentials and key
  details.

  1. First, identify the following authentication credentials on Google KMS:

     .. list-table::
        :header-rows: 1
        :stub-columns: 1

        * - Field
          - Required
          - Description

        * - email
          - Yes
          - Identifies your service account email address.

        * - privateKey
          - Yes
          - Identifies your service account private key in either
            `base64 string <https://en.wikipedia.org/wiki/Base64>`__ or
            :manual:`Binary subtype 0 <reference/mongodb-extended-json/#bson.Binary>`
            format.

        * - endpoint
          - No
          - Specifies a hostname and port number for the authentication server.
            Defaults to oauth2.googleapis.com.

  2. Next, add your authentication credentials to your CSFLE-enabled client
     code:

     .. tabs-drivers::

        .. tab::
           :tabid: java-sync

           .. code-block:: java

              Map<String, Map<String, Object>> kmsProviders = new HashMap<String, Map<String, Object>>();
              Map<String, Object> providerDetails = new HashMap<String, Object>();

              providerDetails.put("email", new BsonString("<GCP service account email>"));
              providerDetails.put("privateKey", new BsonString("<GCP service account private key>"));
              providerDetails.put("endpoint", new BsonString("<GCP authentication endpoint>"));

              kmsProviders.put("gcp", providerDetails);

           .. note::

              To use the GCP KMS, you must use
              `mongodb-crypt <https://mvnrepository.com/artifact/org.mongodb/mongodb-crypt>`__
              version 1.1 or later in your application's environment.

        .. tab::
           :tabid: nodejs

           .. code-block:: javascript

              kmsProviders = {
                gcp: {
                  email: "<GCP service account email>",
                  privateKey: "<GCP service account private key>",
                  endpoint: "<GCP authentication endpoint>",
                },
              }

           .. note::

              To use the GCP KMS, you must use ``mongodb-client-encryption`` version
              `1.1.1 <https://www.npmjs.com/package/mongodb-client-encryption/v/1.1.1-beta.0>`__  or later.

        .. tab::
           :tabid: python

           .. code-block:: python

              kms_provider = {
                  "gcp": {
                      "email": "<GCP service account email>",
                      "privateKey": "<GCP service account private key>",
                      "endpoint": "<GCP authentication endpoint>",
                  }
              }

           .. note::

              To use the GCP KMS, you must use ``pymongocrypt`` version
              1.1 or later in your application's environment. Follow our guide
              to `build libmongocrypt from source <https://github.com/mongodb/libmongocrypt/tree/master/bindings/python#installing-from-source>`__.

        .. tab::
           :tabid: csharp

           .. code-block:: csharp

              var kmsProviders = new Dictionary<string, IReadOnlyDictionary<string, object>>();

              var gcpPrivateKey = Environment.GetEnvironmentVariable("FLE_GCP_PRIVATE_KEY");
              var gcpEmail = Environment.GetEnvironmentVariable("FLE_GCP_EMAIL");
              var gcpEndpoint = Environment.GetEnvironmentVariable("FLE_GCP_IDENTITY_ENDPOINT"); // Optional, defaults to "oauth2.googleapis.com".
              var gcpKmsOptions = new Dictionary<string, object>
              {
                  { "privateKey", gcpPrivateKey },
                  { "email", gcpEmail },
              };
              if (gcpEndpoint != null)
              {
                  gcpKmsOptions.Add("endpoint", gcpEndpoint);
              }
              kmsProviders.Add("gcp", gcpKmsOptions);

           .. note::

              To use the GCP KMS, you must use
              `libmongocrypt <https://github.com/mongodb/libmongocrypt#installing-libmongocrypt-on-windows>`__ version 1.1 or later in your application's environment.

        .. tab::
           :tabid: go

           In ``kms/provider.go``, update the variable declarations or define the expected environmental variables
           in ``GCPProvider()``.

           .. code-block:: go

              gcpEmail := GetCheckedEnv("FLE_GCP_EMAIL")
              gcpPrivateKey := GetCheckedEnv("FLE_GCP_PRIVATE_KEY")

           The expected KMS provider map is created with struct tags.

           .. code-block:: go

              func (g *GCP) Credentials() map[string]map[string]interface{} {
                  return map[string]map[string]interface{}{"gcp": structs.Map(g.credentials)}
              }


           .. note::

              To use the GCP KMS, you must use
              `libmongocrypt <https://github.com/mongodb/libmongocrypt>`__ 
              version 1.1 or later in your application's environment.

---
title: Create a New Data Encryption Key
ref: create-a-new-data-key-gcp
content: |
  To encrypt your data, you need a data encryption key generated from your
  KMS-hosted **master key**. The following diagram shows the requests you need
  to make from the client application to create and store a new **data
  encryption key**:

  .. image:: /figures/CSFLE_Data_Key_KMS.png
     :alt: Diagram that describes creating a data encryption key when using a KMS provider

  1. First, provide your client with the following information to access the
     master key:

     .. list-table::
        :header-rows: 1
        :stub-columns: 1

        * - Field
          - Required
          - Description

        * - projectId
          - Yes
          - Identifier for your project in which you created the key.

        * - location
          - Yes
          - Region specified for your key.

        * - keyRing
          - Yes
          - Identifier for the group of keys your key belongs to.

        * - keyName
          - Yes
          - Identifier for the symmetric master key.

        * - keyVersion
          - No
          - Specifies the version of the named key. If not specified, the default
            version of the key is used.

        * - endpoint
          - No
          - Specifies the host and optional port of the Cloud KMS. The default
            is ``cloudkms.googleapis.com``.

  2. Once you have the required information, update and run the following code
     to generate a new data encryption key:

     .. tabs-drivers::

        .. tab::
           :tabid: java-sync

           In ``CSFLEHelpers.java``, update your call to
           ``DataKeyOptions.masterKey()`` to include your master key data:

           .. code-block:: Java

              DataKeyOptions dataKeyOptions = new DataKeyOptions().masterKey(
                  new BsonDocument()
                      .append("provider", "gcp")
                      .append("projectId", "<GCP project identifier>")
                      .append("location", "<GCP region>")
                      .append("keyRing", "<GCP key ring name>")
                      .append("keyVersion", "<GCP key version>")
                      .append("endpoint", "<GCP KMS API endpoint>"));

              BsonBinary dataKeyId = clientEncryption.createDataKey("gcp", dataKeyOptions);
        
        .. tab::
           :tabid: nodejs


           .. code-block:: javascript

              const encryption = new ClientEncryption(client, {
                  keyVaultNamespace,
                  kmsProviders,
              });
              const key = await encryption.createDataKey("gcp", {
                 masterKey: {
                   projectId: "<GCP project identifier>",
                   location: "<GCP region>",
                   keyRing: "<GCP key ring name>",
                   keyName: "<GCP key name>",
                   keyVersion: "<GCP key version>",
                   endpoint: "<GCP KMS API endpoint>",
                 },
              });

              const base64DataKeyId = key.toString("base64");
              console.log("DataKeyId [base64]: ", base64DataKeyId);

        .. tab::
           :tabid: python

           In ``app.py``, define the following dictionary to pass to your call to
           ``create_data_key()``:

           .. code-block:: python

              master_key = {
                   "provider": "gcp",
                   "projectId": "<GCP project identifier>",
                   "location": "<GCP region>",
                   "keyRing": "<GCP key ring name>",
                   "keyName": "<GCP key name>",
                   "keyVersion": "<GCP key version>",
                   "endpoint": "<GCP KMS API endpoint>",
              }

           .. note::

              To use Google Cloud KMS, you must use `pymongocrypt <https://pypi.org/project/pymongocrypt/>`__
              version 1.1 or later in your application's environment.

        .. tab::
           :tabid: csharp

           .. code-block:: csharp

              // _connectionString is defined elsewhere as "mongodb://localhost:27017"

              var keyVaultClient = new MongoClient(_connectionString);
              var clientEncryptionOptions = new ClientEncryptionOptions(
                  keyVaultClient: keyVaultClient,
                  keyVaultNamespace: _keyVaultNamespace,
                  kmsProviders: kmsProviders);

              var clientEncryption = new ClientEncryption(clientEncryptionOptions);


              var gcpDataKeyProjectId = Environment.GetEnvironmentVariable("FLE_GCP_PROJ_ID");
              var gcpDataKeyLocation = Environment.GetEnvironmentVariable("FLE_GCP_KEY_LOC"); // Optional. e.g. "global"
              var gcpDataKeyKeyRing = Environment.GetEnvironmentVariable("FLE_GCP_KEY_RING");
              var gcpDataKeyKeyName = Environment.GetEnvironmentVariable("FLE_GCP_KEY_NAME");
              var gcpDataKeyKeyVersion = Environment.GetEnvironmentVariable("FLE_GCP_KEY_VERSION"); // Optional
              var gcpDataKeyEndpoint = Environment.GetEnvironmentVariable("FLE_GCP_KMS_ENDPOINT"); // Optional, KMS URL, defaults to https://www.googleapis.com/auth/cloudkms

              var dataKeyOptions = new DataKeyOptions(
                  masterKey: new BsonDocument
                  {
                      { "projectId", gcpDataKeyProjectId },
                      { "location", gcpDataKeyLocation } ,
                      { "keyRing", gcpDataKeyKeyRing },
                      { "keyName", gcpDataKeyKeyName },
                      { "keyVersion", () => gcpDataKeyKeyVersion, gcpDataKeyKeyVersion != null },
                      { "endpoint", () => gcpDataKeyEndpoint, gcpDataKeyEndpoint != null }
                  });

              var dataKeyId = clientEncryption.CreateDataKey("gcp", dataKeyOptions, CancellationToken.None);

        .. tab::
           :tabid: go

           In ``kms/provider.go``, update the variable declarations or define the expected environmental variables
           in ``GCPProvider()``.

           .. code-block:: go

              gcpProjectID := GetCheckedEnv("FLE_GCP_PROJ_ID")
              gcpLocation := GetCheckedEnv("FLE_GCP_LOCATION")
              gcpKeyRing := GetCheckedEnv("FLE_GCP_KEY_RING")
              gcpKeyName := GetCheckedEnv("FLE_GCP_KEY_NAME")

           Struct tags are used to pass these values directly to the driver for use. In ``kms/provider.go``

           .. code-block:: go

              func (g *GCP) DataKeyOpts() interface{} {
                  return g.dataKeyOpts
              }

           In ``csfle/data_key.go``

           .. code-block:: go

              dataKeyOpts := options.DataKey().SetMasterKey(provider.DataKeyOpts())
              dataKeyID, err := clientEnc.CreateDataKey(context.TODO(), provider.Name(), dataKeyOpts)

---
title: Update the Automatic Encryption JSON Schema
ref: update-the-json-schema-gcp
content: |
  If you previously embedded the key ID of your data encryption key in your
  automatic encryption rules, update the :ref:`JSON Schema <fle-define-a-json-schema>`
  with your new data encryption key id.

  Your client application is now ready to automatically encrypt your data
  using the master key on your KMS provider.
