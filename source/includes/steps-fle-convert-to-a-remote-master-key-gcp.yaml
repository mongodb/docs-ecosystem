title: Create a GCP Service Account
ref: create-a-gcp-service-account
content: |

  Create a service account for your client application by following the
  official Google documentation on
  `Creating and managing a service account <https://cloud.google.com/iam/docs/creating-managing-service-accounts#creating>`__.

  After you create the service account, locate and record the following
  authentication settings for use in a later step: 

  - **email**
  - **privateKey** (this value is only returned when you create the account)
  - **endpoint**

---
title: Create the Master Key
ref: create-the-master-key-gcp
content: |

  The following diagram shows how the **master key** is created and stored
  on a KMS provider:

  .. image:: /figures/CSFLE_Master_Key_KMS.png
     :alt: Diagram that describes creating a master key when using a KMS provider

  Create a **symmetric key** using the official Google Cloud
  `Creating symmetric keys guide <https://cloud.google.com/kms/docs/creating-keys>`__.
  This is your master key which you can access from your application.

  .. note::

     If you rotate the key whether by specifying a date or manually, the
     provider changes the content of the master key. In order to transition
     to using the new key, you need to perform the following steps:

     - decrypt and save the data using the original data encryption key
     - generate a new data encryption key with the new master key
     - update the ``keyVersion`` parameter to the latest version of the master
       key
     - re-encrypt the data using the new data encryption key

  Make sure your application has appropriate roles to encrypt and decrypt
  using the key. For example, the
  `roles/cloudkms.cryptoKeyEncrypterDecrypter <https://cloud.google.com/kms/docs/reference/permissions-and-roles>`__
  role has permissions to both encrypt and decrypt keys.

  .. important::

     The client application *should not* have administrative permissions
     for the master key. We recommend that you follow the
     `principle of least privilege <https://en.wikipedia.org/wiki/Principle_of_least_privilege>`__
     to keep your data secure.

---
title: Create a New Data Encryption Key
ref: create-a-new-data-key-gcp
content: |
  In this step, we generate a new **data encryption key** using the
  **master key** in the remote KMS. The following diagram shows the
  requests you make from the client application to create and store a
  new data encryption key:

  .. image:: /figures/CSFLE_Data_Key_KMS.png
     :alt: Diagram that describes creating a data encryption key when using a KMS provider

  Provide your client with the following information to access the master key:
  
  Once you have the required information, update and run the following code
  to generate a new data encryption key:

  .. tabs-drivers::

     .. tab::
        :tabid: java-sync

        .. code-block:: Java

           // TODO: check correctness
           DataKeyOptions dataKeyOptions = new DataKeyOptions().masterKey(
               new BsonDocument()
                   .append("provider", "gcp")
                   .append("projectId", "<GCP project identifier>")
                   .append("location", "<GCP region>")
                   .append("keyRing", "<GCP key ring name>")
                   .append("keyVersion", "<GCP key version>")
                   .append("endpoint", "<GCP KMS API endpoint>"));

           BsonBinary dataKeyId = clientEncryption.createDataKey("gcp", dataKeyOptions);
     .. tab::
        :tabid: nodejs

        .. code-block:: javascript

           // TODO: check correctness
           const key = await encryption.createDataKey('gcp', {
              masterKey: {
                provider: 'gcp',
                projectId: '<GCP project identifier>',
                location: '<GCP region>',
                keyRing: '<GCP key ring name>',
                keyName: '<GCP key name>',
                keyVersion: '<GCP key version>',
                endpoint: '<GCP KMS API endpoint>',
              }
           });

           const base64DataKeyId = key.toString('base64');
           console.log('DataKeyId [base64]: ', base64DataKeyId);
     .. tab::
        :tabid: python

        In ``app.py``, define the following dictionary to pass to your call to
        ``create_data_key()``:

        .. code-block:: python

           master_key = {
                "provider": "gcp",
                "projectId": "<GCP project identifier>",
                "location": "<GCP region>",
                "keyRing": "<GCP key ring name>",
                "keyName": "<GCP key name>",
                "keyVersion": "<GCP key version>",
                "endpoint": "<GCP KMS API endpoint>",
           }

        .. note::

           To use Google Cloud KMS, you must use `pymongocrypt <https://pypi.org/project/pymongocrypt/>`__
           version 1.1 or later in your application's environment.

---
title: Update the Automatic Encryption JSON Schema
ref: update-the-json-schema-gcp
content: |
  If you embedded the key id of your data encryption key in your
  automatic encryption rules, you will need to update the :ref:`JSON
  Schema <fle-define-a-json-schema>` with the new data encryption key id.
