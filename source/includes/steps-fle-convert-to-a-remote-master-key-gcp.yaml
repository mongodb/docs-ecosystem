title: Create a GCP Service Account
ref: create-a-gcp-service-account
content: |

  Create a service account for your client application by following the
  official Google documentation on
  `Creating and managing a service account <https://cloud.google.com/iam/docs/creating-managing-service-accounts#creating>`__.

  After you create the service account, locate and record the following
  authentication settings for use in a later step:

  - **email**
  - **privateKey** (this value is only returned when you create the account)
  - **endpoint**

---
title: Create the Master Key
ref: create-the-master-key-gcp
content: |

  The following diagram shows the creation and storage of a  **master key**
  on a KMS provider:

  .. image:: /figures/CSFLE_Master_Key_KMS.png
     :alt: Diagram that describes creating a master key when using a KMS provider

  Create a **symmetric key** using the official Google Cloud
  `Creating symmetric keys guide <https://cloud.google.com/kms/docs/creating-keys>`__.
  This is your master key which you can access from your application.

  .. note::

     If you rotate the key, either by specifying a date or manually, the
    provider changes the content of the master key. To transition
    to the new key:

     1. Decrypt and save the data using the original data encryption key.
     #. Generate a new data encryption key with the new master key.
     #. Update the ``keyVersion`` parameter to the latest version of the master key.
     #. Re-encrypt the data using the new data encryption key.

  Make sure your application has appropriate roles to encrypt and decrypt
  using the key. For example, the
  `roles/cloudkms.cryptoKeyEncrypterDecrypter <https://cloud.google.com/kms/docs/reference/permissions-and-roles>`__
  role has permissions to both encrypt and decrypt keys.

  .. important::

     The client application *should not* have administrative permissions
     for the master key. We recommend that you follow the
     `principle of least privilege <https://en.wikipedia.org/wiki/Principle_of_least_privilege>`__
     to keep your data secure.

---
title: Specify your Google Cloud KMS Credentials
ref: specify-your-gcp-kms-provider-credentials
content: |
  Unlike the local key provider, the Google Cloud KMS does not read
  the master key directly from the client application. Instead,
  it retrieves the key using your service client credentials and key
  details.

  Configure your client application with the following authentication
  credentials:

  .. list-table::
     :header-rows: 1
     :stub-columns: 1

     * - Field
       - Required
       - Description

     * - email
       - Yes
       - Identifies your service account email address.

     * - privateKey
       - Yes
       - Identifies your service account private key in either
         `base64 string <https://en.wikipedia.org/wiki/Base64>`__ or
         :manual:`Binary subtype 0 <reference/mongodb-extended-json/#bson.Binary>`
         format.

     * - endpoint
       - No
       - Specifies a hostname and port number for the authentication server.
         Defaults to oauth2.googleapis.com.

  Update the KMS Provider configuration in your CSFLE-enabled client
  creation code:

  .. tabs-drivers::

     .. tab::
        :tabid: java-sync

        .. code-block:: java

           Map<String, Map<String, Object>> kmsProviders = new HashMap<String, Map<String, Object>>();
           Map<String, Object> providerDetails = new HashMap<String, Object>();

           providerDetails.put("email", new BsonString("<GCP service account email>"));
           providerDetails.put("privateKey", new BsonString("<GCP service account private key>"));
           providerDetails.put("endpoint", new BsonString("<GCP authentication endpoint>"));

           kmsProviders.put("gcp", providerDetails);

     .. tab::
        :tabid: nodejs

        .. code-block:: javascript

           // TODO: check correctness
           kmsProviders = {
             gcp: {
               email: '<GCP service account email>',
               privateKey: '<GCP service account private key>',
               endpoint: '<GCP authentication endpoint>',
             }
           }

     .. tab::
        :tabid: python

        .. code-block:: python

           kms_provider = {
               "gcp": {
                   "email": "<GCP service account email>",
                   "privateKey": "<GCP service account private key>",
                   "endpoint": "<GCP authentication endpoint>",
               }
           }
---
title: Create a New Data Encryption Key
ref: create-a-new-data-key-gcp
content: |
  Generate a new **data encryption key** using the **master key** in the
  remote KMS. The following diagram shows the requests you make from the
  client application to create and store a new data encryption key:

  .. image:: /figures/CSFLE_Data_Key_KMS.png
     :alt: Diagram that describes creating a data encryption key when using a KMS provider

  Provide your client with the following information to access the master key:

  .. list-table::
     :header-rows: 1
     :stub-columns: 1

     * - Field
       - Required
       - Description

     * - projectId
       - Yes
       - Identifier for your project in which you created the key.

     * - location
       - Yes
       - Region specified for your key.

     * - keyRing
       - Yes
       - Identifier for the group of keys your key belongs to.

     * - keyName
       - Yes
       - Identifier for the symmetric master key.

     * - keyVersion
       - No
       - Specifies the version of the named key. If not specified, the default
         version of the key is used.

     * - endpoint
       - No
       - Specifies the host and optional port of the Cloud KMS. The default
         is ``cloudkms.googleapis.com``.

  Once you have the required information, update and run the following code
  to generate a new data encryption key:

  .. tabs-drivers::

     .. tab::
        :tabid: java-sync

        In ``CSFLEHelpers.java``, update your call to
        ``DataKeyOptions.masterKey()`` to include your master key data:

        .. code-block:: Java

           DataKeyOptions dataKeyOptions = new DataKeyOptions().masterKey(
               new BsonDocument()
                   .append("provider", "gcp")
                   .append("projectId", "<GCP project identifier>")
                   .append("location", "<GCP region>")
                   .append("keyRing", "<GCP key ring name>")
                   .append("keyVersion", "<GCP key version>")
                   .append("endpoint", "<GCP KMS API endpoint>"));

           BsonBinary dataKeyId = clientEncryption.createDataKey("gcp", dataKeyOptions);
     .. tab::
        :tabid: nodejs

        .. code-block:: javascript

           // TODO: check correctness
           const key = await encryption.createDataKey('gcp', {
              masterKey: {
                provider: 'gcp',
                projectId: '<GCP project identifier>',
                location: '<GCP region>',
                keyRing: '<GCP key ring name>',
                keyName: '<GCP key name>',
                keyVersion: '<GCP key version>',
                endpoint: '<GCP KMS API endpoint>',
              }
           });

           const base64DataKeyId = key.toString('base64');
           console.log('DataKeyId [base64]: ', base64DataKeyId);
     .. tab::
        :tabid: python

        In ``app.py``, define the following dictionary to pass to your call to
        ``create_data_key()``:

        .. code-block:: python

           master_key = {
                "provider": "gcp",
                "projectId": "<GCP project identifier>",
                "location": "<GCP region>",
                "keyRing": "<GCP key ring name>",
                "keyName": "<GCP key name>",
                "keyVersion": "<GCP key version>",
                "endpoint": "<GCP KMS API endpoint>",
           }

        .. note::

           To use Google Cloud KMS, you must use `pymongocrypt <https://pypi.org/project/pymongocrypt/>`__
           version 1.1 or later in your application's environment.

---
title: Update the Automatic Encryption JSON Schema
ref: update-the-json-schema-gcp
content: |
  If you embedded the key id of your data encryption key in your
  automatic encryption rules, you will need to update the :ref:`JSON
  Schema <fle-define-a-json-schema>` with the new data encryption key id.
