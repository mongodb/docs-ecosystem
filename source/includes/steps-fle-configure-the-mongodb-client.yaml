title: Specify the Key Vault Collection Namespace
ref: specify-the-key-vault-collection-namespace
content: |
  The key vault collection contains the data key that the client uses to
  encrypt and decrypt fields. MedcoMD uses the collection
  ``encryption.__keyVault`` as the key vault in the following
  **code snippet**.

  .. tabs-drivers::

     .. tab::
        :tabid: java-sync

        .. code-block:: java

           String keyVaultNamespace = "encryption.__keyVault";
     .. tab::
        :tabid: nodejs

        .. code-block:: javascript

           const keyVaultNamespace = 'encryption.__keyVault';
     .. tab::
        :tabid: python

        .. code-block:: python

           key_vault_namespace = "encryption.__keyVault"
---
title: Specify the Local Master Encryption Key
ref: specify-the-local-master-encryption-key
content: |
  The client expects a key management system to store and provide the
  application's master encryption key. For now, MedcoMD only has a local
  master key, so they use the ``local`` KMS provider and specify the key
  inline with the following **code snippet**.

  .. tabs-drivers::

     .. tab::
        :tabid: java-sync

        .. code-block:: java
           :emphasize-lines: 2,5

           Map<String, Object> keyMap = new HashMap<String, Object>();
           keyMap.put("key", localMasterKey);

           Map<String, Map<String, Object>> kmsProviders = new HashMap<String, Map<String, Object>>();
           kmsProviders.put("local", keyMap);
     .. tab::
        :tabid: nodejs

        .. code-block:: javascript
           :emphasize-lines: 2,3

           const kmsProviders = {
             local: {
               key: localMasterKey,
             }
           }
     .. tab::
        :tabid: python

        .. code-block:: python
           :emphasize-lines: 2,3

           kms_providers = {
             "local": {
               "key": local_master_key
             }
           }
---
title: Map the JSON Schema to the Patients Collection
ref: map-the-json-schema-to-the-patients-collection
content: |
  The MedcoMD engineers assign their schema to a variable. The JSON Schema
  that MedcoMD defined doesn't explicitly specify the collection to which it
  applies. To assign the schema, they map it to the ``medicalRecords.patients``
  collection namespace in the following **code snippet**:

  .. tabs-drivers::

     .. tab::
        :tabid: java-sync

        .. code-block:: java
           :emphasize-lines: 2

           HashMap<String, BsonDocument> schemaMap = new HashMap<String, BsonDocument>();
           schemaMap.put("medicalRecords.patients", BsonDocument.parse(jsonSchema));
     .. tab::
        :tabid: nodejs

        .. code-block:: javascript
           :emphasize-lines: 2

           const patientSchema = {
             'medicalRecords.patients': jsonSchema,
           }
     .. tab::
        :tabid: python

        .. code-block:: python
           :emphasize-lines: 2

           patient_schema = {
             "medicalRecords.patients": json_schema
           }
---
title: Specify the Location of the Encryption Binary
ref: specify-the-location-of-the-encryption-binary
content: |
  MongoDB drivers communicate with the ``mongocryptd`` encryption binary to
  perform automatic client-side field level encryption. The ``mongocryptd``
  process performs the following:

  - Validates the encryption instructions defined in the JSON Schema
    and flags the referenced fields for encryption in read and write
    operations.
  - Prevents unsupported operations from being executed on encrypted fields.

  Configure the client to spawn the ``mongocryptd`` process by specifying the
  path to the binary using the following configuration options:

  .. tabs-drivers::

     .. tab::
        :tabid: java-sync

        .. code-block:: java
           :emphasize-lines: 2

           Map<String, Object> extraOptions = new HashMap<String, Object>();
           extraOptions.put("mongocryptdSpawnPath", "/usr/local/bin/mongocryptd");

        .. admonition:: Encryption Binary Daemon
           :class: note

           If the ``mongocryptd`` daemon is already running, you can
           configure the client to skip starting it by passing the
           following option:

           .. code-block:: java
              :emphasize-lines: 1

              extraOptions.put("mongocryptdBypassSpawn", true);
     .. tab::
        :tabid: nodejs

        .. code-block:: javascript
           :emphasize-lines: 2

           const extraOptions = {
             mongocryptdSpawnPath: '/usr/local/bin/mongocryptd',
           }

        .. admonition:: Encryption Binary Daemon
           :class: note

           If the ``mongocryptd`` daemon is already running, you can
           configure the client to skip starting it by passing the
           following option:

           .. code-block:: javascript
              :emphasize-lines: 1

               extraOptions.mongocryptdBypassSpawn = true;
     .. tab::
        :tabid: python

        .. code-block:: python
           :emphasize-lines: 2

           extra_options = {
              'mongocryptd_spawn_path': '/usr/local/bin/mongocryptd'
           }

        .. admonition:: Encryption Binary Daemon
           :class: note

           If the ``mongocryptd`` daemon is already running, you can
           configure the client to skip starting it by passing the
           following option:

           .. code-block:: python
              :emphasize-lines: 1

               extra_options['mongocryptd_bypass_spawn'] = True

---
title: Create the MongoClient
ref: create-the-mongoclient
content: |
  To create the CSFLE-enabled client, MedcoMD instantiates a standard
  MongoDB client object with the additional automatic encryption
  settings with the following **code snippet**:

  .. tabs-drivers::

     .. tab::
        :tabid: java-sync

        .. code-block:: java
           :emphasize-lines: 3-8

           MongoClientSettings clientSettings = MongoClientSettings.builder()
               .applyConnectionString(new ConnectionString("mongodb://localhost:27017"))
               .autoEncryptionSettings(AutoEncryptionSettings.builder()
                   .keyVaultNamespace(keyVaultNamespace)
                   .kmsProviders(kmsProviders)
                   .schemaMap(schemaMap)
                   .extraOptions(extraOptions)
                   .build())
               .build();

           MongoClient mongoClient = MongoClients.create(clientSettings);
     .. tab::
        :tabid: nodejs

        .. code-block:: javascript
           :emphasize-lines: 5-9

           const secureClient = new MongoClient(connectionString, {
               useNewUrlParser: true,
               useUnifiedTopology: true,
               monitorCommands: true,
               autoEncryption: {
                 keyVaultNamespace,
                 kmsProviders,
                 schemaMap: patientSchema,
                 extraOptions: extraOptions,
               }
           });
     .. tab::
        :tabid: python

        .. code-block:: python
           :emphasize-lines: 2-5

           fle_opts = AutoEncryptionOpts(
              kms_providers,
              key_vault_namespace,
              schema_map=patient_schema,
              **extra_options
           )
           client = MongoClient(connection_string, auto_encryption_opts=fle_opts)
