title: Read the Locally-Managed Master Key from a File
ref: read-local-master-key-from-file
level: 4
content: |
  First, retrieve the contents of the local master key file that you generated
  in the :ref:`Create a Master Key <fle-create-a-master-key>` section:

  .. tabs-drivers::

     .. tab::
        :tabid: java-sync

        .. code-block:: java
           :emphasize-lines: 11

           String path = "master-key.txt";

           byte[] fileBytes = new byte[96];

           try (FileInputStream fis = new FileInputStream(path)) {
             fileBytes = fis.readAllBytes();
           } catch (IOException e) {
             e.printStackTrace();
           }

           final byte[] localMasterKey = Arrays.copyOf(fileBytes, 96);
---
title: Specify KMS Provider Settings
ref: specify-kms-provider-settings
level: 4
content: |
  Next, specify the KMS provider settings. The client uses these settings to
  discover the master key. Set the provider name to ``local`` when using a local
  master key:

  .. tabs-drivers::

     .. tab::
        :tabid: java-sync

        The KMS provider settings are stored in a Map in order to use the
        :java-docs-latest:`kmsProviders helper
        method <javadoc/com/mongodb/ClientEncryptionSettings.Builder.html#kmsProviders(java.util.Map)>`
        for the ClientEncryptionSettings Builder.

        .. code-block:: java
           :emphasize-lines: 4,5

           String kmsProvider = "local";

           Map<String, Map<String, Object>> kmsProviders = new HashMap<String, Map<String, Object>>() {{
             put(kmsProvider, new HashMap<String, Object>() {{
               put("key", localMasterKey);
             }});
           }};
---
title: Create a Data Encryption Key
ref: create-a-data-encryption-key
level: 4
content: |
  Construct a client with the MongoDB connection string and key vault
  namespace configuration, and create a data encryption key. The key vault in
  this example uses the ``encryption`` database and ``__keyVault`` collection.

  .. tabs-drivers::

     .. tab::
        :tabid: java-sync

        .. code-block:: java
           :emphasize-lines: 8,9,12,13

           String connectionString = "mongodb://localhost:27017";
           String keyVaultNamespace = "encryption.__keyVault";

           ClientEncryptionSettings clientEncryptionSettings = ClientEncryptionSettings.builder()
             .keyVaultMongoClientSettings(MongoClientSettings.builder()
               .applyConnectionString(new ConnectionString(connectionString))
               .build())
             .keyVaultNamespace(keyVaultNamespace)
             .kmsProviders(kmsProviders)
             .build();

           ClientEncryption clientEncryption = ClientEncryptions.create(clientEncryptionSettings);
           BsonBinary dataKeyId = clientEncryption.createDataKey(kmsProvider, new DataKeyOptions());
           System.out.println("DataKeyId [UUID]: " + dataKeyId.asUuid());

           final String base64DataKeyId = Base64.getEncoder().encodeToString(dataKeyId.getData());
           System.out.println("DataKeyId [base64]: " + base64DataKeyId);

        The ``createDataKey()`` method returns a :java-docs-latest:`BsonBinary
        <javadoc/org/bson/BsonBinary.html>` object from which we can extract
        the UUID and Base64 representations of the key id.

  The ``_id`` field of the data encryption key is represented as a **UUID**
  and is encoded in **Base64** format. Use your **Base64**-encoded data key
  id when specified for the remainder of this guide.

  The output from the code above should resemble the following:

  .. code-block:: none

     DataKeyId [UUID]: de4d775a-4499-48bc-bb93-3f81c3c90704
     DataKeyId [base64]: 3k13WkSZSLy7kwAAP4HDyQ==

  .. note::

     Ensure that the client has `ReadWrite
     <https://docs.mongodb.com/manual/reference/built-in-roles/#readWrite>`_
     permissions on the specified key vault namespace.
---
title: Verify that the Data Encryption Key was Created
ref: verify-data-key-created
level: 4
content: |
  Query the key vault collection for the data encryption key that was inserted
  as a document into your MongoDB replica set using the key id printed in the
  prior step.

  .. tabs-drivers::

     .. tab::
        :tabid: java-sync

        .. code-block:: java
           :emphasize-lines: 4

           String connectionString = "mongodb://localhost:27017";
           String keyVaultDb = "encryption";
           String keyVaultCollection = "__keyVault";
           String base64KeyId = "3k13WkSZSLy7kwAAP4HDyQ=="; // use the base64 data key id returned by createKey() in the prior step

           MongoClient mongoClient = MongoClients.create(connectionString);
           MongoCollection<Document> collection = mongoClient.getDatabase(keyVaultDb).getCollection(keyVaultCollection);

           Bson query = Filters.eq("_id", new Binary((byte) 4, Base64.getDecoder().decode(base64KeyId)));
           Document doc = collection
               .find(query)
               .first();

           System.out.println(doc);

        This code example should print a retrieved document that resembles the
        following:

        .. code-block:: none

           Document{{
               _id=dad3a063-4f9b-48f8-bf4e-7ca9d323fd1c,
               keyMaterial=org.bson.types.Binary@40e1535,
               creationDate=Wed Sep 25 22:22:54 EDT 2019,
               updateDate=Wed Sep 25 22:22:54 EDT 2019,
               status=0,
               masterKey=Document{{provider=local}}
           }}

        .. admonition:: View the Extended JSON Representation of the Data Key
           :class: note

           While the ``Document`` class is the
           :java-docs-latest:`Document type </bson/documents>`
           most commonly used to work with query results, we can use the
           ``BsonDocument`` class to view the data key document as extended
           JSON. Replace the ``Document`` assignment code with the following
           to retrieve and print a ``BsonDocument``:

           .. code-block:: java
              :emphasize-lines: 1,2

              BsonDocument doc = collection
                  .withDocumentClass(BsonDocument.class)
                  .find(query)
                  .first();

              System.out.println(doc);

  This retrieved document contains the following data:

  * Data encryption key UUID.
  * Data encryption key, in encrypted form.
  * KMS provider information for the master key.
  * Other metadata such as creation and last modified date.
