title: Create an AWS IAM User
ref: create-an-aws-iam-user
content: |
  1. Create a new programmatic IAM user in the AWS management console by
     following the official AWS documentation on `Adding a User <https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_create.html>`__.
     CSFLE-enabled clients authenticate with AWS KMS using the IAM user to
     encrypt and decrypt the remote master key. Take note of the following
     IAM credentials needed to authenticate with the KMS:

     - **access key ID**
     - **secret access key**

  2. Grant the IAM user full ``List`` and ``Read`` permissions for the KMS
     service. See Amazon's official documentation on
     `Adding permissions to a user <https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_change-permissions.html>`__
     to set these permissions.

---
title: Create the Master Key
ref: create-the-master-key
content: |
  The following diagram shows the steps required to create a new
  **master key** on a KMS provider.

  .. image:: /figures/CSFLE_Master_Key_KMS.png
     :alt: Diagram that describes creating a master key when using a KMS provider

  1. To create a master key, log into your AWS management console and create
     a new symmetric master key in the KMS section. Choose a name and
     description that helps you identify it; these fields do not affect the
     functionality or configuration.

  2. In the :guilabel:`Usage Permissions` step of the key generation
     process, add the full KMS ``List`` and ``Read`` permissions to the IAM
     user you created in the previous step. This authorizes the user to
     encrypt and decrypt the new master key.

  .. important::

     The new client IAM User *should not* have administrative permissions
     for the master key. We recommend that you follow the
     `principle of least privilege <https://en.wikipedia.org/wiki/Principle_of_least_privilege>`__
     to keep your data secure.
---
title: Specify the AWS KMS Provider Credentials
ref: specify-the-aws-kms-provider-credentials
content: |
  Unlike the local key provider, the AWS KMS provider does not read
  the master key directly from the client application. Instead,
  it accepts the :guilabel:`Access Key ID` and :guilabel:`Secret Access
  Key` configurations that point to the master key. The IAM user must have
  the permissions set up in the previous step in order for the client to
  use the KMS to encrypt and decrypt data encryption keys.  Follow the steps
  below to specify your credentials:

  1. First, identify the following authentication credentials on AWS KMS:

     .. list-table::
        :header-rows: 1
        :stub-columns: 1

        * - Field
          - Required
          - Description

        * - Access Key ID
          - Yes
          - Identifies the account user

        * - Secret Access Key
          - Yes
          - Contains the authentication credentials of the account user

  2. Next, add your authentication credentials to your CSFLE-enabled client
     code:

  .. tabs-drivers::

     .. tab::
        :tabid: java-sync

        .. code-block:: java

           BsonString awsAccessKeyId = new BsonString("<IAM User Access Key ID>");
           BsonString awsSecretAccessKey = new BsonString("<IAM User Secret Access Key>");
           Map<String, Map<String, Object>> kmsProviders = new HashMap<String, Map<String, Object>>();
           Map<String, Object> providerDetails = new HashMap<String, Object>();

           providerDetails.put("accessKeyId", awsAccessKeyId);
           providerDetails.put("secretAccessKey", awsSecretAccessKey);

           kmsProviders.put("aws", providerDetails);
           
     .. tab::
        :tabid: nodejs

        .. code-block:: javascript

           kmsProviders = {
             aws: {
               accessKeyId: "<IAM User Access Key ID>",
               secretAccessKey: "<IAM User Secret Access Key>",
             },
           }

     .. tab::
        :tabid: python

        .. code-block:: python

           kms_providers = {
               "aws": {
                   "accessKeyId": "<IAM User Access Key ID>",
                   "secretAccessKey": "<IAM User Secret Access Key>"
               }
           }

     .. tab::
        :tabid: csharp

        .. code-block:: csharp

           var kmsProviders = new Dictionary<string, IReadOnlyDictionary<string, object>>();

           var awsAccessKey = Environment.GetEnvironmentVariable("FLE_AWS_ACCESS_KEY");
           var awsSecretAccessKey = Environment.GetEnvironmentVariable("FLE_AWS_SECRET_ACCESS_KEY");
           var awsKmsOptions = new Dictionary<string, object>
           {
               { "accessKeyId", awsAccessKey },
               { "secretAccessKey", awsSecretAccessKey }
           };
           kmsProviders.Add("aws", awsKmsOptions);

        .. note::

           To use the AWS Key Vault, you must use
           `libmongocrypt <https://github.com/mongodb/libmongocrypt#installing-libmongocrypt-on-windows>`__ version 1.0 or later in your application's environment.

     .. tab::
        :tabid: go

        In ``kms/provider.go``, update the variable declarations or define the expected environmental variables in
        ``AWSProvider()``.

        .. code-block:: go

           awsAccessKeyID := GetCheckedEnv("FLE_AWS_ACCESS_KEY")
           awsSecretAccessKey := GetCheckedEnv("FLE_AWS_SECRET_ACCESS_KEY")

        The expected KMS provider map is created with struct tags.

        .. code-block:: go

           func (a *AWS) Credentials() map[string]map[string]interface{} {
               return map[string]map[string]interface{}{"aws": structs.Map(a.credentials)}
           }


---
title: Create a New Data Encryption Key
ref: create-a-new-data-key
content: |
  To encrypt your data, you need a data encryption key generated from your
  KMS-hosted **master key**. The following diagram shows the requests you need
  to make from the client application to create and store a new **data
  encryption key**:

  .. image:: /figures/CSFLE_Data_Key_KMS.png
     :alt: Diagram that describes creating a data encryption key when using a KMS provider

  1. First, specify the following information to access the master key:

     .. list-table::
        :header-rows: 1
        :stub-columns: 1

        * - Field
          - Required
          - Description

        * - key
          - Yes
          - `Amazon Resource Number (ARN) <https://docs.aws.amazon.com/kms/latest/developerguide/viewing-keys.html#find-cmk-id-arn>`__
            of the master key.

        * - region
          - No
          - AWS region of your master key, e.g. "us-west-2"; required only if not specified in your ARN.

        * - endpoint
          - No
          - Custom hostname for the AWS endpoint if configured for your account.

  2. Once you have the required information, update and run the following code
     to generate the new data encryption key:

  .. tabs-drivers::

     .. tab::
        :tabid: java-sync

        .. code-block:: Java

           ClientEncryption clientEncryption = ClientEncryptions.create(ClientEncryptionSettings.builder()
               .keyVaultMongoClientSettings(MongoClientSettings.builder()
                   .applyConnectionString(new ConnectionString("mongodb://localhost:27017"))
                   .build())
               .keyVaultNamespace(keyVaultNamespace)
               .kmsProviders(kmsProviders)
               .build());

           BsonString masterKeyArn = new BsonString("<Master Key ARN>"); // e.g. "arn:aws:kms:us-east-2:111122223333:alias/test-key"
           BsonString masterKeyRegion = new BsonString("<Master Key Region>")
           DataKeyOptions dataKeyOptions = new DataKeyOptions().masterKey(
               new BsonDocument()
                   .append("key", masterKeyArn));
                   .append("region", masterKeyRegion)

           BsonBinary dataKeyId = clientEncryption.createDataKey("aws", dataKeyOptions);
           String base64DataKeyId = Base64.getEncoder().encodeToString(dataKeyId.getData());

           System.out.println("DataKeyId [base64]: " + base64DataKeyId);

        .. note::

           To use AWS KMS, you must use `mongodb-crypt <https://mvnrepository.com/artifact/org.mongodb/mongodb-crypt>`__
           version 1.0 or later in your application's environment.

     .. tab::
        :tabid: nodejs

        .. code-block:: javascript

           const encryption = new ClientEncryption(client, {
               keyVaultNamespace,
               kmsProviders,
           });
           const key = await encryption.createDataKey("aws", {
              masterKey: {
                key: "<Master Key ARN>", // e.g. "arn:aws:kms:us-east-2:111122223333:alias/test-key"
                region: "<Master Key AWS Region>", // e.g. "us-east-2"
              },
           });

           const base64DataKeyId = key.toString("base64");
           console.log("DataKeyId [base64]: ", base64DataKeyId);

     .. tab::
        :tabid: python

        .. code-block:: python

           import pymongo
           from pymongo import MongoClient
           from pymongo.encryption_options import AutoEncryptionOpts
           from bson.binary import STANDARD
           from bson.codec_options import CodecOptions

           connection_string = "mongodb://localhost:27017"
           key_vault_namespace = "encryption.__keyVault"

           fle_opts = AutoEncryptionOpts(
              kms_providers, # pass in the kms_providers from the previous step
              key_vault_namespace
           )
         
           client = MongoClient(connection_string)
           client_encryption = pymongo.encryption.ClientEncryption(
              {
                "aws": {
                  "accessKeyId": "<IAM User Access Key ID>",
                  "secretAccessKey": "<IAM User Secret Access Key>"
                }
              },
              key_vault_namespace,
              client,
              CodecOptions(uuid_representation=STANDARD)
           )
           data_key_id = client_encryption.create_data_key("aws", {"region": "<Master Key AWS Region>","key": "<Master Key ARN>"})

        .. note::

           To use AWS KMS, you must use `pymongocrypt <https://pypi.org/project/pymongocrypt/>`__
           version 1.0 or later in your application's environment.

     .. tab::
        :tabid: csharp

        .. code-block:: csharp

            var keyVaultClient = new MongoClient(connectionString);
            var clientEncryptionOptions = new ClientEncryptionOptions(
                keyVaultClient: keyVaultClient,
                keyVaultNamespace: keyVaultNamespace,
                kmsProviders: kmsProviders);

            var clientEncryption = new ClientEncryption(clientEncryptionOptions);
            var awsKeyARN = Environment.GetEnvironmentVariable("FLE_AWS_KEY_ARN"); // e.g. "arn:aws:kms:us-east-2:111122223333:alias/test-key"
            var awsKeyRegion = Environment.GetEnvironmentVariable("FLE_AWS_KEY_REGION");
            var awsEndpoint = Environment.GetEnvironmentVariable("FLE_AWS_ENDPOINT"); // Optional, AWS KMS URL.
            var dataKeyOptions = new DataKeyOptions(
                masterKey: new BsonDocument
                {
                    { "region", awsKeyRegion },
                    { "key", awsKeyARN },
                    { "endpoint", () => awsEndpoint, awsEndpoint != null }
                });

            var dataKeyId = clientEncryption.CreateDataKey("aws", dataKeyOptions, CancellationToken.None);
            Console.WriteLine($"AWS DataKeyId [UUID]: {dataKeyId}");
            var dataKeyIdBase64 = Convert.ToBase64String(GuidConverter.ToBytes(dataKeyId, GuidRepresentation.Standard));
            Console.WriteLine($"AWS DataKeyId [base64]: {dataKeyIdBase64}");

        .. note::

           To use the AWS Key Vault, you must use
           `libmongocrypt <https://github.com/mongodb/libmongocrypt#installing-libmongocrypt-on-windows>`__ version 1.0 or later in your application's environment.

     .. tab::
        :tabid: go

        In ``kms/provider.go``, update the variable declarations or define the expected environmental variables
        in ``AWSProvider()``.

        .. code-block:: go

           awsKeyARN := GetCheckedEnv("FLE_AWS_KEY_ARN")
           awsKeyRegion := GetCheckedEnv("FLE_AWS_KEY_REGION")

        Struct tags are used to pass these values directly to the driver for use. In ``kms/provider.go``

        .. code-block:: go

           func (a *AWS) DataKeyOpts() interface{} {
               return a.dataKeyOpts
           }

        In ``csfle/data_key.go``

        .. code-block:: go

           dataKeyOpts := options.DataKey().SetMasterKey(provider.DataKeyOpts())
           dataKeyID, err := clientEnc.CreateDataKey(context.TODO(), provider.Name(), dataKeyOpts)

---
title: Update the Automatic Encryption JSON Schema
ref: update-the-json-schema
content: |
  If you previously embedded the key ID of your data encryption key in your
  automatic encryption rules, update the :ref:`JSON Schema <fle-define-a-json-schema>`
  with your new data encryption key ID.

  Your client application is now ready to automatically encrypt your data
  using the master key on your KMS provider.
