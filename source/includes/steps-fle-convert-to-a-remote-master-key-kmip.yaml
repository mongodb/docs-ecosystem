title: Configure Your KMIP Compliant KMS
ref: create-an-aws-iam-user
content: |

  .. important:: Java Only

     At present only the MongoDB Java Driver supports 

  1. Configure your KMIP Compliant KMS to Accept your client's TLS `.pem` certificate.

  2. Add your KMIP

---
title: Specify your Certificates
ref: specify-the-aws-kms-provider-credentials
content: |
  Unlike the local key provider, the KMIP provider does not read
  the master key directly from the client application. Instead,
  it accepts the :guilabel:`keyId` configuration option that points to the
  master key on your KMIP compliant KMS.  Follow the steps
  below to specify your credentials:

  1. Add your authentication credentials to your CSFLE-enabled client
     code:
     
  .. include:: /includes/substitute-placeholders.rst

  .. tabs-drivers::

     .. tab::
        :tabid: java-sync

        .. code-block:: java

           BsonString awsAccessKeyId = new BsonString("<IAM User Access Key ID>");
           BsonString awsSecretAccessKey = new BsonString("<IAM User Secret Access Key>");
           Map<String, Map<String, Object>> kmsProviders = new HashMap<String, Map<String, Object>>();
           Map<String, Object> providerDetails = new HashMap<String, Object>();

           providerDetails.put("accessKeyId", awsAccessKeyId);
           providerDetails.put("secretAccessKey", awsSecretAccessKey);

           kmsProviders.put("aws", providerDetails);

---
title: Create a New Data Encryption Key
ref: create-a-new-data-key
content: |
  To encrypt your data, you need a data encryption key generated from your
  KMS-hosted **master key**. The following diagram shows the requests you need
  to make from the client application to create and store a new **data
  encryption key**:

  .. image:: /figures/CSFLE_Data_Key_KMS.png
     :alt: Diagram that describes creating a data encryption key when using a KMS provider

  1. First, specify the following information to access the master key:

     .. list-table::
        :header-rows: 1
        :stub-columns: 1
        :widths: 30 15 45

        * - Field
          - Required
          - Description

        * - key
          - Yes
          - `Amazon Resource Number (ARN) <https://docs.aws.amazon.com/kms/latest/developerguide/viewing-keys.html#find-cmk-id-arn>`__
            of the master key.

        * - region
          - No
          - AWS region of your master key, e.g. "us-west-2"; required only if not specified in your ARN.

        * - endpoint
          - No
          - Custom hostname for the AWS endpoint if configured for your account.

  2. Once you have the required information, update and run the following code
     to generate the new data encryption key:
     
  .. include:: /includes/substitute-placeholders.rst

  .. tabs-drivers::

     .. tab::
        :tabid: java-sync

        .. code-block:: Java

           ClientEncryption clientEncryption = ClientEncryptions.create(ClientEncryptionSettings.builder()
               .keyVaultMongoClientSettings(MongoClientSettings.builder()
                   .applyConnectionString(new ConnectionString("mongodb://localhost:27017"))
                   .build())
               .keyVaultNamespace(keyVaultNamespace)
               .kmsProviders(kmsProviders)
               .build());

           BsonString masterKeyArn = new BsonString("<Master Key ARN>"); // e.g. "arn:aws:kms:us-east-2:111122223333:alias/test-key"
           BsonString masterKeyRegion = new BsonString("<Master Key Region>")
           DataKeyOptions dataKeyOptions = new DataKeyOptions().masterKey(
               new BsonDocument()
                   .append("key", masterKeyArn));
                   .append("region", masterKeyRegion)

           BsonBinary dataKeyId = clientEncryption.createDataKey("aws", dataKeyOptions);
           String base64DataKeyId = Base64.getEncoder().encodeToString(dataKeyId.getData());

           System.out.println("DataKeyId [base64]: " + base64DataKeyId);

        .. note::

           To use AWS KMS, you must use `mongodb-crypt <https://mvnrepository.com/artifact/org.mongodb/mongodb-crypt>`__
           version 1.0 or later in your application's environment.

---
title: Update the Automatic Encryption JSON Schema
ref: update-the-json-schema
content: |
  If you previously embedded the key ID of your data encryption key in your
  automatic encryption rules, update the :ref:`JSON Schema <fle-define-a-json-schema>`
  with your new data encryption key ID.

  Your client application is now ready to automatically encrypt your data
  using the master key on your KMS provider.
