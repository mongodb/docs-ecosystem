title: Configure Your KMIP KMS
ref: configure-kmip-kms
content: |

  To connect a MongoDB driver client to your KMIP KMS, you must configure your KMS
  such that it has the following behaviors:

  - Accepts your client's TLS certificate
  - Contains a symmetric master key

  Consult the documentation for your KMIP KMS for information on how
  to perform these tasks for your specific KMS server.

---
title: Specify your Certificates
ref: specify-certificates
content: |

  Your client must connect to your KMIP KMS through TLS and present
  a client certificate accepted by your KMS server.

  .. tabs-drivers::

     .. tab::
        :tabid: java-sync

        Specify the following Java system properties to configure your client's
        TLS connection: 

        .. code-block:: Shell
        
           -Djavax.net.ssl.enabled=true
           -Djavax.net.ssl.keyStoreType=pkcs12
           -Djavax.net.ssl.keyStore=<path to pkcs12 KeyStore containing your client certificate>
           -Djavax.net.ssl.keyStorePassword=<KeyStore password>
           -Djavax.net.ssl.trustStoreType=jks
           -Djavax.net.ssl.trustStore=<path to TrustStore containing KMIP KMS CA file>
           -Djavax.net.ssl.trustStorePassword=<TrustStore password>
      
        .. note:: Configure Client With SSLContext

           If you would rather configure your KMIP client using an SSL context, use the 
           `kmsProviderSslContextMap <{+java-api+}/apidocs/mongodb-driver-core/com/mongodb/ClientEncryptionSettings.Builder.html#kmsProviderSslContextMap(java.util.Map)>`__
           method.

---
title: Create a New Data Encryption Key
ref: create-a-new-data-key
content: |
  To encrypt your data, you need a data encryption key generated from your
  KMS-hosted **master key**. The following diagram shows the requests you need
  to make from the client application to create and store a new **data
  encryption key**:

  .. image:: /figures/CSFLE_Data_Key_KMS.png
     :alt: Diagram that describes creating a data encryption key when using a KMS provider

  1. First, specify the following information to access the master key:

     .. list-table::
        :header-rows: 1
        :stub-columns: 1
        :widths: 30 15 45

        * - Field
          - Required
          - Description

        * - keyId
          - Yes
          - The ``keyId`` field of your KMIP object.

        * - endpoint
          - Yes
          - The URI of your KMIP server.

  2. Once you have the required information, update and run the following code
     to generate the new data encryption key:
     
  .. include:: /includes/substitute-placeholders.rst

  .. tabs-drivers::

     .. tab::
        :tabid: java-sync

        .. code-block:: Java

           Map<String, Map<String, Object>> kmsProviderProperties = new HashMap<>();
           Map<String, Object> providerDetails = new HashMap<>();
           providerDetails.put("endpoint", "<KMIP KMS URI>");
           kmsProviderProperties.put(kmsProvider,  providerDetails);
           String keyVaultCollection = "<MongoDB namespace where you store your keys>"

           ClientEncryption clientEncryption = ClientEncryptions.create(ClientEncryptionSettings.builder()
               .keyVaultMongoClientSettings(MongoClientSettings.builder()
                   .applyConnectionString(new ConnectionString("mongodb://localhost:27017"))
                   .build())
               .keyVaultNamespace(keyVaultNamespace)
               .kmsProviders(kmsProviders)
               .build());

           DataKeyOptions dataKeyOptions = new DataKeyOptions().masterKey(
               new BsonDocument()
                   .append("keyId", "<your KeyId>"));

           BsonBinary dataKeyId = clientEncryption.createDataKey("kmip", dataKeyOptions);
           String base64DataKeyId = Base64.getEncoder().encodeToString(dataKeyId.getData());

           System.out.println("DataKeyId [base64]: " + base64DataKeyId);

        .. note::

           To use a KMIP KMS, you must use `mongodb-crypt <https://mvnrepository.com/artifact/org.mongodb/mongodb-crypt>`__
           version 1.3 or later in your application's environment.

---
title: Update the Automatic Encryption JSON Schema
ref: update-the-json-schema
content: |
  If you previously embedded the key ID of your data encryption key in your
  automatic encryption rules, update the :ref:`JSON Schema <fle-define-a-json-schema>`
  with your new data encryption key ID.

  Your client application is now ready to automatically encrypt your data
  using the master key on your KMS provider.
