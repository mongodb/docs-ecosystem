title: Create an Azure User
ref: create-an-azure-user
content: |
  Create a new programmatic IAM user in the AWS management console.
  CSFLE-enabled clients authenticate with AWS KMS using the IAM user to
  encrypt and decrypt the remote master key. The IAM user must be granted
  full ``List`` and ``Read`` permissions for the KMS service.

  .. note:: Client IAM User Credentials

     The CSFLE-enabled client uses the IAM User's :guilabel:`Access Key
     ID` and :guilabel:`Secret Access Key` as configuration values. Take
     note of these and reference them when we update the client.
---
title: Create the Master Key
ref: create-the-master-key
content: |

  The following diagram shows the process of creating a **master key** on
  a KMS provider:

  .. image:: /figures/CSFLE_Master_Key_KMS.png
     :alt: Diagram that describes creating a master key on a KMS provider

  You can create a master key with the Azure CLI by following Microsoft's
  `Secrets Guide <https://docs.microsoft.com/en-us/azure/key-vault/secrets/about-secrets>`__.
  Follow the instructions in one of the :guilabel:`Quickstarts` sections that
  corresponds to your preferred method to create and configure your key.
  For example, the `Portal Quickstart <https://docs.microsoft.com/en-us/azure/key-vault/secrets/quick-create-portal>`__
  demonstrates how to create a new vault and key.

  Make sure you provide the ``list`` and ``read`` permissions to the
  principal used by your client application.

  .. important::

     The client user *should not* have administrative permissions for the
     master key.
---
title: Specify the Azure Credentials
ref: specify-the-azure-credentials
content: |
  Unlike the local key provider, the Azure Key Vault does not read the
  master key directly from the client application. Instead, it retrieves
  the key using your Azure credentials and the key vault details.

  Configure your client application with the following authorization
  credentials:

  .. list-table::
   :header-rows: 1
   :stub-columns: 1

   * - Field
     - Required
     - Description

   * - azure.tenantId
     - Yes
     - Identifies the organization of the account

   * - azure.clientId
     - Yes
     - Identifies the clientId to authenticate your registered application

   * - azure.clientSecret
     - Yes
     - Used to authenticate your registered application

   * - azure.identityPlatformEndpoint
     - No
     - Specifies a hostname and port number for the  authentication server.
       Defaults to login.microsoftonline.com and is only needed for
       non-commercial Azure instances such as a government or China account.

  Update the KMS Provider configuration in your CSFLE-enabled client
  creation code:

  .. tabs-drivers::

     .. tab::
        :tabid: java-sync


        .. code-block:: java

           // TODO: verify correctness
           Map<String, Object> providerDetails = new HashMap<String, Object>();

           providerDetails.put("tenantId", new BsonString("<Azure account organization>"));
           providerDetails.put("clientId", new BsonString("<Azure client ID>"));
           providerDetails.put("clientSecret", new BsonString("<Azure client secret>"));

           Map<String, Map<String, Object>> kmsProviders = new HashMap<String, Map<String, Object>>();
           kmsProviders.put("azure", providerDetails);

     .. tab::
        :tabid: nodejs

        .. code-block:: javascript

           // TODO: verify correctness
           kms_providers = {
             azure: {
               tenantId: "<Azure account organization>",
               clientId: "<Azure client ID>",
               clientSecret: "<Azure client secret>"
             }
           }

     .. tab::
        :tabid: python

        In ``app.py``:

        .. code-block:: python

           kms_providers = {
              "azure": {
                  "tenantId": "<Azure account organization>",
                  "clientId": "<Azure client ID>",
                  "clientSecret": "<Azure client secret>"
              }
           }
---
title: Create a New Data Encryption Key
ref: create-a-new-data-key
content: |

  In this step, we generate a new **data encryption key** using the
  **master key** in the remote KMS. The following diagram shows the
  requests you make from the client application to create and store a
  new data encryption key:

  .. image:: /figures/CSFLE_Data_Key_KMS.png
     :alt: Diagram that describes creating a data encryption key when using a KMS provider

  Provide your client with the following information to access the master key:

   * - Field
     - Required
     - Description

   * - keyName
     - Yes
     - Name of the master key

   * - keyVersion
     - No
     - Version of the master key

   * - keyVaultEndpoint
     - Yes
     - URL of the key vault. E.g. myVaultName.vault.azure.net

  Once you have the required information, run the following code to
  generate the new data encryption key:

  .. tabs-drivers::

     .. tab::
        :tabid: java-sync

        .. code-block:: Java

           // TODO: update for Azure
           ClientEncryption clientEncryption = ClientEncryptions.create(ClientEncryptionSettings.builder()
               .keyVaultMongoClientSettings(MongoClientSettings.builder()
                   .applyConnectionString(new ConnectionString("mongodb://localhost:27017"))
                   .build())
               .keyVaultNamespace(keyVaultNamespace)
               .kmsProviders(kmsProviders)
               .build());

           BsonString masterKeyRegion = new BsonString("<Master Key AWS Region>"); // e.g. "us-east-2"
           BsonString masterKeyArn = new BsonString("<Master Key ARN>"); // e.g. "arn:aws:kms:us-east-2:111122223333:alias/test-key"
           DataKeyOptions dataKeyOptions = new DataKeyOptions().masterKey(
               new BsonDocument()
                   .append("region", masterKeyRegion)
                   .append("key", masterKeyArn));

           BsonBinary dataKeyId = clientEncryption.createDataKey("aws", dataKeyOptions);
           String base64DataKeyId = Base64.getEncoder().encodeToString(dataKeyId.getData());

           System.out.println("DataKeyId [base64]: " + base64DataKeyId);

     .. tab::
        :tabid: nodejs

        .. code-block:: javascript

           // TODO: update for Azure
           const encryption = new ClientEncryption(client, {
               keyVaultNamespace,
               kmsProviders
           });
           const key = await encryption.createDataKey('aws', {
              masterKey: {
                key: '<Master Key ARN>', // e.g. 'arn:aws:kms:us-east-2:111122223333:alias/test-key'
              }
           });

           const base64DataKeyId = key.toString('base64');
           console.log('DataKeyId [base64]: ', base64DataKeyId);

     .. tab::
        :tabid: python


        .. note::

           Make sure you are using `pymongocrypt <https://pypi.org/project/pymongocrypt/>`__
           version 1.0.2 or later in your application's environment.

        In ``app.py``:

        .. code-block:: python

           master_key = {
             "keyName": "<Azure key name>",
             # "keyVersion": "<Azure key vault endpoint>",
             "keyVaultEndpoint": "<Azure key version>"
           }

---
title: Update the Automatic Encryption JSON Schema
ref: update-the-json-schema
content: |
  Update your :ref:`JSON Schema <fle-define-a-json-schema>` to reference your
  new data encryption key id.
