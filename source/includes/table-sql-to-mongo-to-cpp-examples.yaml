# table structure. all content symbolic.
section: layout
header: [ meta.header1, meta.header2, meta.header3 ]
rows:
  - 1: [ content.sql1, content.mongo1, content.cpp1 ]
  - 2: [ content.sql2, content.mongo2, content.cpp2 ]
  - 3: [ content.sql3, content.mongo3, content.cpp3 ]
  - 4: [ content.sql4, content.mongo4, content.cpp4 ]
  - 5: [ content.sql5, content.mongo5, content.cpp5 ]
  - 6: [ content.sql6, content.mongo6, content.cpp6 ]
  - 7: [ content.sql7, content.mongo7, content.cpp7 ]
  - 8: [ content.sql8, content.mongo8, content.cpp8 ]
  - 9: [ content.sql9, content.mongo9, content.cpp9 ]
  - 10: [ content.sql10, content.mongo10, content.cpp10 ]
  - 11: [ content.sql11, content.mongo11, content.cpp11 ]
  - 12: [ content.sql12, content.mongo12, content.cpp12 ]
  - 13: [ content.sql13, content.mongo13, content.cpp13 ]
---
# table metadata, as meta.<key>
section: meta
header1: "SQL"
header2: ":program:`manual:mongo` Shell"
header3: "C++ Driver"
---
# table content, as content.<key>
section: content
sql1: |
      .. code-block:: sql

         INSERT INTO USERS
         VALUES( 1, 1)
mongo1: |
        .. code-block:: javascript

           db.users.insert( { a: 1, b: 1 } )
cpp1: |
      .. code-block:: cpp

         // GENOID is optional. if not done by client,
         // server will add an _id

         c.insert("mydb.users", 
           BSON(GENOID<<"a"<<1<<"b"<<1));
         // then:
         string err = c.getLastError();
sql2: |
      .. code-block:: sql

         SELECT a,b FROM users
mongo2: |
        .. code-block:: javascript

           db.users.find( {},
                          {a: 1, b: 1 }
                        )
cpp2: |
      .. code-block:: cpp

         BSONObj b = BSON("a"<<1<<"b"<<1)
         auto_ptr<DBClientCursor> cursor =
           c.query("mydb.users", Query(), 
           0, 0, &b);
sql3: |
      .. code-block:: sql

         SELECT * FROM users
mongo3: |
        .. code-block:: javascript

           db.users.find()
cpp3: |
      .. code-block:: cpp

         auto_ptr<DBClientCursor> cursor =
           c.query("mydb.users", Query());
sql4: |
      .. code-block:: sql

         SELECT *
         FROM users
         WHERE age=33
mongo4: |
        .. code-block:: javascript

           db.users.find( { age: 33 } )
cpp4: |
      .. code-block:: cpp

         auto_ptr<DBClientCursor> cursor =
           c.query("mydb.users", QUERY("age"<<33))
         // or:
         auto_ptr<DBClientCursor> cursor =
           c.query("mydb.users", BSON("age"<<33))
sql5: |
      .. code-block:: sql

         SELECT *
         FROM users
         WHERE age=33
         ORDER BY name
mongo5: |
        .. code-block:: javascript

           db.users.find( { age: 33 } ).sort( { name: 1 } )
cpp5: |
      .. code-block:: cpp

         auto_ptr<DBClientCursor> cursor =
           c.query("mydb.users", 
             QUERY("age"<<33).sort("name"));
sql6: |
      .. code-block:: sql

         SELECT *
         FROM users
         WHERE age>33
         AND age<=40
mongo6: |
        .. code-block:: javascript

           db.users.find( { 'age': { $gt:33, $lte:40 } } )
cpp6: |
        .. code-block:: cpp

           auto_ptr<DBClientCursor> cursor =
             c.query("mydb.users", 
             QUERY("age"<<GT<<33<<LTE<<40));
sql7: |
      .. code-block:: sql

         CREATE INDEX myindexname
         ON users(name)
mongo7: |
        .. code-block:: javascript

           db.users.ensureIndex( {name: 1 } )
cpp7: |
      .. code-block:: cpp

         c.ensureIndex("mydb.users", BSON("name"<<1));
sql8: |
      .. code-block:: sql

         SELECT *
         FROM users
         LIMIT 10
         SKIP 20
mongo8: |
        .. code-block:: javascript

           db.users.find().limit(10).skip(20)
cpp8: |
      .. code-block:: cpp

         auto_ptr<DBClientCursor> cursor =
           c.query("mydb.users", Query(), 
                   10, 20);
sql9: |
      .. code-block:: sql

         SELECT * FROM users LIMIT 1
mongo9: |
        .. code-block:: javascript

           db.users.findOne()
cpp9: |
      .. code-block:: cpp

        bo obj = c.findOne("mydb.users", Query());
sql10: |
       .. code-block:: sql

          SELECT DISTINCT last_name
          FROM users
          WHERE x=1
mongo10: |
         .. code-block:: javascript

            db.users.distinct( 'last_name', {x: 1} )
cpp10: |
       .. code-block:: cpp

          // no helper for distinct yet in c++ driver,
          // so send command manually
          bo cmdResult;
          bool ok = c.runCommand(
            "mydb",
            BSON("distinct" << "users"
                            << "key" << "last_name"
                            << "query" << BSON("x"<<1)),
            cmdResult);
          list<bo> results;
          cmdResult["values"].Obj().Vals(results);
sql11: |
       .. code-block:: sql

          SELECT COUNT(*) 
          FROM users
          where AGE > 30
mongo11: |
         .. code-block:: javascript

            db.users.find( { age: { $gt: 30 } } ).count()
cpp11: |
       .. code-block:: cpp

          unsigned long long n = 
             c.count("mydb.users", BSON("age"<<GT<<30));
sql12: |
       .. code-block:: sql

          UPDATE users 
          SET a=a+2 
          WHERE b='q'
mongo12: |
         .. code-block:: javascript

            db.users.update( { b: 'q' },
                             { $inc: { a:2 } }, 
                             false, true)
cpp12: |
       .. code-block:: cpp

          c.update("mydb.users", QUERY("b"<<"q"), 
                   BSON("$inc"<<BSON("a"<<2)), false, true);
          // then optionally:
          string err = c.getLastError();
          bool ok = err.empty();
sql13: |
       .. code-block:: sql

          DELETE
          FROM users
          WHERE z="abc"
mongo13: |
         .. code-block:: javascript

            db.users.remove( { z: 'abc' } )
cpp13: |
       .. code-block:: cpp

          c.remove("mydb.users", QUERY("z"<<"abc"));
          // then optionally:
          string err = c.getLastError();
...
