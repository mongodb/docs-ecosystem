.. http://www.mongodb.org/pages/viewpage.action?pageId=16646453    WRITING-116 C++ BSON Library
.. http://www.mongodb.org/pages/viewpage.action?pageId=21268822    WRITING-119 C++ getLastError 
.. http://www.mongodb.org/display/DOCS/Connecting                  WRITING-121 Connecting
.. http://www.mongodb.org/pages/viewpage.action?pageId=133409      WRITING-76 C++ Language Center 

.. _cpp-driver-library:

==================
C++ Driver Library
==================

.. default-domain:: mongodb

A C++ driver is available for communicating with the MongoDB. As the
database is written in C++, the driver actually uses some core MongoDB
code -- this is the same driver that the database uses itself for
replication.

The driver has been compiled successfully on Linux, OS X, Windows, and
Solaris.

See also the following C++ Driver documents:

- :ref:`download-and-compile-cpp-driver`

- :ref:`getting-started-with-cpp-driver`

- `API Documentation <http://api.mongodb.org/cplusplus>`_

- HOWTO

  - `Tailable Cursor
    <http://docs.mongodb.org/manual/tutorial/create-tailable-cursor>`_

  - :ref:`bson-array-examples-in-cpp`

- `MongoDB Database and C++ Driver Source Code`_ (at github). See the
  client subdirectory for client driver related files.

Additional Notes
----------------

.. TODO change Building reference to correct reference

- The :ref:`Building` documentation covers compiling the entire database, but
  some of the notes there may be helpful for compiling client
  applications too.

- There is also a pure `C driver`_ for MongoDB. For true C++ apps we
  recommend using the C++ driver.

.. _`MongoDB Database and C++ Driver Source Code`:
   https://github.com/mongodb/mongo

.. _`C driver`: https://github.com/mongodb/mongo-c-driver

.. _cpp-bson-library:

C++ BSON Library
----------------

The MongoDB C++ driver library includes a bson package that implements
the BSON specification (see `<http://www.bsonspec.org>`_). This library can
be used standalone for object serialization and deserialization even
when one is not using MongoDB at all.

Include :file:`bson/bson.h` or :file:`db/jsobj.h` in your application (not
both). :file:`bson.h` is new and may not work in some situations, was is good
for light header-only usage of BSON (see the :file:`bsondemo.cpp` example).

Key classes:

- `mongo::BSONObj (aka bson::bo)`_ a BSON object

- `mongo::BSONElement (bson::be)`_ a single element in a BSON object.
  This is a key and a value.

- `mongo::BSONObjBuilder (bson::bob)`_ used to make BSON objects

- `mongo::BSONObjIterator (bson::bo::iterator)`_ to enumerate BSON objects

See :ref:`BSON examples in the Getting Started guide <getting-started-bson-examples>`

.. _`mongo::BSONObj (aka bson::bo)`:
   http://api.mongodb.org/cplusplus/current/classmongo_1_1_b_s_o_n_obj.html

.. _`mongo::BSONElement (bson::be)`:
   http://api.mongodb.org/cplusplus/current/classmongo_1_1_b_s_o_n_element.html

.. _`mongo::BSONObjBuilder (bson::bob)`:
   http://api.mongodb.org/cplusplus/current/classmongo_1_1_b_s_o_n_obj_builder.html

.. _`mongo::BSONObjIterator (bson::bo::iterator)`:
   http://api.mongodb.org/cplusplus/current/classmongo_1_1_b_s_o_n_obj_iterator.html

Standalone Usage
~~~~~~~~~~~~~~~~

You can use the C++ BSON library without MongoDB. Most BSON methods
under the ``bson/`` directory are header-only. They require ``boost``, but
headers only.

See the `bsondemo.cpp example at github.com`_.

.. _`bsondemo.cpp example at github.com`:
   https://github.com/mongodb/mongo/blob/master/src/mongo/bson/bsondemo/bsondemo.cpp

API Documentation
~~~~~~~~~~~~~~~~~

- `<http://api.mongodb.org/cplusplus>`_

Short Class Names
~~~~~~~~~~~~~~~~~

Add

.. code-block:: cpp

   using namespace bson;

to your code to use the following shorter more C++ style names for the
BSON classes:

.. code-block:: cpp

   // from bsonelement.h
   namespace bson {
       typedef mongo::BSONElement be;
       typedef mongo::BSONObj bo;
       typedef mongo::BSONObjBuilder bob;
   }

(Or one could use ``bson::bo`` fully qualified for example).

Also available is ``bo::iterator`` as a synonym for ``BSONObjIterator``.

.. _cpp-dbclientconnection:

C++ DBClientConnection
----------------------

The C++ driver includes several classes for managing collections under
the parent class ``DBClientInterface``.

``DBClientConnection`` is our normal connection class for a connection
to a single MongoDB database server (or shard manager). Other classes
exist for connecting to a replica set.

See `<http://api.mongodb.org/cplusplus>`_ for details on each of the
above classes.

.. _cpp-getLastError:

C++ getLastError
----------------

- ``string`` `mongo::DBClientWithCommands::getLastError();`_
     Get error result from the last operation on this connection. Empty
     string if no error.

- ``BSONObj DBClientWithCommands::getLastErrorDetailed();`` 
     Get the full last error object. See the `getLastError Command
     <http://docs.mongodb.org/manual/core/write-operations/#write-concern>`_
     page for details.

See `client/simple_client_demo.cpp`_ for an example.

.. seealso::

  `getLastError Command
  <http://docs.mongodb.org/manual/core/write-operations/#write-concern>`_

.. _`mongo::DBClientWithCommands::getLastError();`:
   http://api.mongodb.org/cplusplus/#5ad5855d5be74bc144d443f00927340d

.. _`client/simple_client_demo.cpp`:
   https://github.com/mongodb/mongo/blob/master/src/mongo/client/simple_client_demo.cpp
