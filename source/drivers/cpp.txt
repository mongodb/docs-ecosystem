.. http://www.mongodb.org/pages/viewpage.action?pageId=16646453    WRITING-116 C++ BSON Library
.. http://www.mongodb.org/pages/viewpage.action?pageId=21268822    WRITING-119 C++ getLastError 
.. http://www.mongodb.org/display/DOCS/Connecting                  WRITING-121 Connecting
.. http://www.mongodb.org/pages/viewpage.action?pageId=133409      WRITING-76 C++ Language Center 

.. _cpp-driver-library:

==================
C++ Driver Library
==================

.. default-domain:: mongodb

A C++ driver is available for communicating with the MongoDB. As the
database is written in C++, the driver actually uses some core MongoDB
code. This is the same driver that the database uses itself for
replication.

There is a pure `C driver <https://github.com/mongodb/mongo-c-driver>`_
for MongoDB, but for true C++ apps we recommend using the C++ driver.

The C++ driver builds successfully on Linux, OS X, Windows, and
Solaris.

See the following:

- `API Documentation <http://api.mongodb.org/cplusplus>`_

- `MongoDB Database and C++ Driver Source Code <https://github.com/mongodb/mongo>`_. See the
  client subdirectory for client driver related files.

- :ref:`getting-started-with-cpp-driver`

- `Create Tailable Cursor <http://docs.mongodb.org/manual/tutorial/create-tailable-cursor>`_

- :ref:`sql-to-mongo-shell-to-cpp`

- :ref:`cpp-bson-helper-functions`

- :ref:`cpp-bson-array-examples`

.. _cpp-bson-library:

C++ BSON Library
----------------

The MongoDB C++ driver library includes a bson package that implements
the BSON specification (see http://www.bsonspec.org). This library can
be used standalone for object serialization and deserialization even
when one is not using MongoDB at all.

Include :file:`bson/bson.h` in your application. See the :file:`bsondemo.cpp` for example usage.

Key classes:

- `mongo::BSONObj (aka bson::bo) <http://api.mongodb.org/cplusplus/current/classmongo_1_1_b_s_o_n_obj.html>`_:
  a BSON object

- `mongo::BSONElement (bson::be) <http://api.mongodb.org/cplusplus/current/classmongo_1_1_b_s_o_n_element.html>`_:
  a single element in a BSON object. This is a key and a value.

- `mongo::BSONObjBuilder (bson::bob) <http://api.mongodb.org/cplusplus/current/classmongo_1_1_b_s_o_n_obj_builder.html>`_:
  used to make BSON objects

- `mongo::BSONObjIterator (bson::bo::iterator) <http://api.mongodb.org/cplusplus/current/classmongo_1_1_b_s_o_n_obj_iterator.html>`_:
  used to enumerate BSON objects

See :ref:`BSON examples in the Getting Started guide <getting-started-bson-examples>`

Standalone Usage
~~~~~~~~~~~~~~~~

You can use the C++ BSON library without MongoDB by including the mongo/bson/bson.h header.

See the `bsondemo.cpp example at github.com <https://github.com/mongodb/mongo/blob/master/src/mongo/bson/bsondemo/bsondemo.cpp>`_

API Documentation
~~~~~~~~~~~~~~~~~

- http://api.mongodb.org/cplusplus

Short Class Names
~~~~~~~~~~~~~~~~~

Add

.. code-block:: cpp

   using namespace bson;

to your code to use the following shorter names for the
BSON classes:

.. code-block:: cpp

   // from bsonelement.h
   namespace bson {
       typedef mongo::BSONElement be;
       typedef mongo::BSONObj bo;
       typedef mongo::BSONObjBuilder bob;
   }

(Or one could use ``bson::bo`` fully qualified for example).

Also available is ``bo::iterator`` as a synonym for ``BSONObjIterator``.

.. _cpp-dbclientconnection:

C++ DBClientConnection
----------------------

The C++ driver includes several classes for managing collections under
the parent class ``DBClientInterface``.

``DBClientConnection`` is the normal connection class for a connection
to a single MongoDB database server (or shard manager). Other classes
exist for connecting to a replica set.

See http://api.mongodb.org/cplusplus for details on each of the
above classes.

.. _cpp-getLastError:

C++ getLastError
----------------

- ``string`` `mongo::DBClientWithCommands::getLastError(); <http://api.mongodb.org/cplusplus/#5ad5855d5be74bc144d443f00927340d>`_
  Get error result from the last operation on this connection. Empty string if no error.

- ``BSONObj DBClientWithCommands::getLastErrorDetailed();`` 
  Get the full last error object. See the `getLastError Command
  <http://docs.mongodb.org/manual/core/write-operations/#write-concern>`_
  page for details.

For an example, see
`client/simple_client_demo.cpp <https://github.com/mongodb/mongo/blob/master/src/mongo/client/simple_client_demo.cpp>`_.

Also see `getLastError Command <http://docs.mongodb.org/manual/core/write-operations/#write-concern>`_.
