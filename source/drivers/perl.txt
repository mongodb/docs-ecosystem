.. http://www.mongodb.org/display/DOCS/Perl+Language+Center

.. _perl-language-center:

====================
Perl Language Center
====================

.. default-domain:: mongodb

Installing
----------

Start a MongoDB server instance (:program:`mongod`) before installing so
that the tests will pass. The :program:`mongod` cannot be running as a
slave for the tests to pass.

Some tests may be skipped, depending on the version of the database you
are running.

CPAN
~~~~

.. code-block:: sh

   sudo cpan MongoDB

The Perl driver is available through CPAN as the package
`MongoDB <http://search.cpan.org/dist/MongoDB/>`_.
It should build cleanly on \*NIX and Windows (via
`Strawberry Perl <http://strawberryperl.com/>`_).
It is also available as an ActivePerl module.

Manual (Non-CPAN) Installation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you would like to try the latest code or are contributing to the Perl
driver, it is available at `GitHub <https://github.com/mongodb/mongo-perl-driver>`_.
There is also `documentation <http://api.mongodb.org/perl/index.html>`_
generated after every commit.

You can see if it is a good time to grab the bleeding edge code by
seeing if the `build is green <http://buildbot.mongodb.org/waterfall>`_.

The Perl driver requires some libraries available in CPAN. As of August,
2013, these are: 

.. code-block:: sh

   Data::Types
   DateTime
   DateTime::Tiny
   ExtUtils::MakeMaker
   File::Slurp
   File::Temp
   FileHandle
   JSON
   Test::Exception
   Test::Warn
   Tie::IxHash
   Try::Tiny
   boolean
   ExtUtils::MakeMaker
   Class::Method::Modifiers
   DateTime
   Digest::MD5
   Moose
   Tie::IxHash
   XSLoader

In order to install the dependencies, first copy the names of the
packages into a text file, packages.txt. Then run the following:

.. code-block:: sh

   sudo cpan App::cpanminus
   cat packages.txt | sudo cpanm

Before you are able to build the MongoDB module, you'll also need
Dist::Zilla. Get Dist::Zilla and its dependencies with the following:

.. code-block:: sh

   sudo cpan Dist::Zilla
   dzil authordeps | sudo cpanm

Next, use Dist::Zilla to create a copy of the driver module with the
correct version information:

.. code-block:: sh

   dzil build

This will create a new directory named something like MongoDB-0.702.1.
To build and install the driver, change to this directory and run:

.. code-block:: sh

   perl Makefile.PL
   make
   make test # make sure mongod is running, first
   sudo make install

The tests will not pass without a :program:`mongod` process running.

Big-Endian Systems
~~~~~~~~~~~~~~~~~~

The driver will work on big-endian machines, but the database will not.
The tests assume that :program:`mongod` will be running on localhost
unless ``%ENV{MONGOD}`` is set. So, to run the tests, start the database
on a little-endian machine (at, say, "example.com") and then run the
tests with:

.. code-block:: sh

   MONGOD=example.com make test

A few tests that require a database server on ``localhost`` will be
skipped.

Next Steps
----------

There is a tutorial and API documentation on `CPAN <http://search.cpan.org/dist/MongoDB/>`_.

If you are interested in contributing to the Perl driver, see
:ref:`contribute-to-perl-driver`.

MongoDB Perl Tools
~~~~~~~~~~~~~~~~~~

BSON
----

`BSON <https://metacpan.org/module/BSON>`_ is a pure-Perl BSON
implementation.

Entities::Backend::MongoDB
--------------------------

`Entities::Backend::MongoDB <http://search.cpan.org/~idoperel/Entities-0.2/lib/Entities/Backend/MongoDB.pm>`_
is a backend for the Entities user management and authorization system. It
stores all entities and relations between them in a MongoDB database,
using the MongoDB module. This is a powerful, fast backend that gives
you all the features of MongoDB.

MojoX::Session::Store::MongoDB
------------------------------
`MojoX::Session::Store::MongoDB <http://search.cpan.org/dist/MojoX-Session-Store-MongoDB/>`_
is a store for `MojoX::Session <http://search.cpan.org/dist/MojoX-Session/>`_
that stores a session in a MongoDB database. Created by Ask Bj√∏rn
Hansen.

MongoDB::Admin
--------------

`MongoDB::Admin <http://search.cpan.org/dist/MongoDB-Admin/>`_ is a
collection of MongoDB administrative functions. Created by David Burley.

Mongoose
--------

`Mongoose <http://search.cpan.org/dist/Mongoose/>`_ is an attempt to
bring together the full power of Moose with MongoDB. Created by Rodrigo
de Oliveira Gonzalez.

MongoDBI
--------

`MongoDBI <http://search.cpan.org/dist/MongoDBI/>`_ is an
Object-Document-Mapper (ODM) for MongoDB. It allows you to create
Moose-based classes to interact with MongoDB databases.

At-a-glance, most will enjoy MongoDBI for its ability to easily model
classes while leveraging the power of MongoDB's schema-less and
expeditious document-based design, dynamic queries, and atomic modifier
operations.

Also noteworthy is MongoDBI's ease-of-use, chainable search facilities
(filters), automated indexing, moose-integration (inheritance support,
etc), lean document updates via dirty field tracking, and ability for
each class to be configured to use a different database and connection,
etc.

MongoDBx-Class
--------------

`MongoDBx-Class <http://search.cpan.org/dist/MongoDBx-Class/>`_ is an
ORM for MongoDB databases. MongoDBx::Class takes advantage of the fact
that Perl's MongoDB driver is Moose-based to extend and tweak the
driver's behavior, instead of wrapping it. This means MongoDBx::Class
does not define its own syntax, so you simply use it exactly as you
would the MongoDB driver directly. That said, MongoDBx::Class adds some
sugar that enhances and simplifies the syntax unobtrusively (either use
it or don't). Thus, it is relatively easy to convert your current
MongoDB applications to MongoDBx::Class. A collection in MongoDBx::Class
isa('MongoDB::Collection'), a database in MongoDBx::Class
isa('MongoDB::Database'), etc. Created by Ido Perlmuter.

MongoX
------

`MongoX <http://search.cpan.org/dist/MongoX/>`_: DSL sugar for MongoDB.

OOP Perl CMS
------------

`OOP Perl CMS <http://www.waitman.net/mod_perl-mongodb-CMS.html>`_ is
based on Khurt Williams' Object Oriented Perl methodology and can be
used as a basic CMS framework or as a basis for your own CMS system. It
uses Apache & mod_perl with MongoDB backend. Created by Waitman Gobble.
