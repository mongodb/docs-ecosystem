.. http://www.mongodb.org/display/DOCS/Rails+-+Getting+Started

.. _getting-started-with-rails:

==========================
Getting Started with Rails
==========================

.. default-domain:: mongodb

Using Rails 3? See :doc:`Rails 3 - Getting Started </tutorial/getting-started-with-ruby-on-rails-3>`.

This tutorial describes how to set up a simple Rails application with
MongoDB, using MongoMapper as an object mapper. We assume you're using
Rails versions prior to 3.0.

Using a Rails Template
----------------------

All of the configuration steps listed below, and more, are encapsulated
in `this Rails template <http://gist.github.com/219223>`_
`(raw version) <http://gist.github.com/219223.txt>`_, based on
`a similar one by Ben Scofield <http://gist.github.com/181842>`_.
You can create your project with the template as follows:

.. code-block:: sh

   rails project_name -m <https://gist.github.com/banker/219223/raw/>

Be sure to replace **project_name** with the name of your project.

If you want to set up your project manually, read on.

Configuration
-------------

1. We need to tell MongoMapper which database we'll be using. Save the
   following to :file:`config/initializers/database.rb`:

   .. code-block:: ruby

      MongoMapper.database = "db_name-#{Rails.env}"

   Replace **db_name** with whatever name you want to give the database.
   The **Rails.env** variable will ensure that a different database is
   used for each environment.

#. If you're using Passenger, add this code to
   :file:`config/initializers/database.rb`.

   .. code-block:: ruby

      if defined?(PhusionPassenger)
        PhusionPassenger.on_event(:starting_worker_process) do |forked|
          MongoMapper.connection.connect_to_master if forked
        end
      end

#. Clean out :file:`config/database.yml`. This file should be blank, as
   we're not connecting to the database in the traditional way.

#. Remove ActiveRecord from :file:`environment.rb`.

   .. code-block:: ruby

      config.frameworks -= [:active_record]

5. Add MongoMapper to the environment. This can be done by opening
   :file:`config/environment.rb` and adding the line:

   .. code-block:: ruby

      config.gem 'mongo_mapper'

   Once you've done this, you can install the gem in the project by running:

   .. code-block:: sh

      rake gems:install
      rake gems:unpack

Testing
-------

It's important to keep in mind that with MongoDB, we cannot wrap test
cases in transactions. One possible work-around is to invoke a
**teardown** method after each test case to clear out the database.

To automate this, I've found it effective to modify
``ActiveSupport::TestCase`` with the code below.

.. code-block:: ruby

   # Drop all collections after each test case.
   def teardown
     MongoMapper.database.collections.each do |coll|
       coll.remove
     end
   end

  # Make sure that each test case has a teardown
  # method to clear the db after each test.
  def inherited(base)
    base.define_method :teardown do
      super
    end
  end

This way, all test classes will automatically invoke the teardown
method. In the example above, the teardown method clears each
collection. We might also choose to drop each collection or drop the
database as a whole, but this would be considerably more expensive and
is only necessary if our tests manipulate indexes.

Usually, this code is added in :file:`test/test_helper.rb`. See
`the aforementioned rails template <http://gist.github.com/219223>`_
for specifics.

Coding
------

If you've followed the foregoing steps (or if you've created your Rails
with the provided template), then you're ready to start coding. For
help on that, you can read about
:ref:`modeling your domain in Rails <mongodb-data-modeling-and-rails>`.
