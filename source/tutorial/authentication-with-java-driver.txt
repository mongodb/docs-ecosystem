.. http://www.mongodb.org/display/DOCS/Java+Tutorial WRITING-110

.. _getting-started-with-java-driver:

================================
Getting Started with Java Driver
================================

.. default-domain:: mongodb

Introduction
------------

This page is a brief overview of authenticating to a MongoDB cluster with the MongoDB Java Driver using version 2.11.0 
and above.

The MongoClient class represents a logical connection to a MongoDB cluster.  Internally the MongoClient instance contains
a pool of sockets.  When you present credentials to a MongoClient, it is responsible for authentication of every socket
against all the credentials presented.

Normal Authentication
---------------------

To authenticate as the user "user1" with a password of "password1", defined in the "test" database:

.. code-block:: java

    import com.mongodb.MongoClient;
    import com.mongodb.MongoCredential;
    import com.mongodb.ServerAddress;

// ...
    MongoCredential credential = new MongoCredential("user1", "password1".toCharArray(), "test");

    MongoClient mongoClient = new MongoClient(new ServerAddress(server), Arrays.asList(credential));

In some cases you may need to authenticate as multiple users in different databases.  For example, imagine a map/reduce 
job that reads from the database "first" and writes the results to the database "second".  You may have to authenticate
one user defined in the "first" database and another in the "second":

.. code-block:: java

    MongoCredential credentialOne = new MongoCredential("user1", "password1".toCharArray(), "first");
    MongoCredential credentialTwo = new MongoCredential("user2", "password2".toCharArray(), "second");

    MongoClient mongoClient = new MongoClient(new ServerAddress(server), Arrays.asList(credentialOne, credentialTwo));

Note that as of the 2.4 server release, this is no long necessary, since you are able to define a user in one database
and delegate privileges for that user in another database.

Kerberos Authentication
-----------------------

To authenticate to a MongoDB cluster using Kerberos, you must supply the Kerberos user name and specify the Kerberos
authentication mechanism:

.. code-block:: java

    MongoCredential credential = new MongoCredential("user1@MYREALM.ME", MongoAuthenticationMechanism.GSSAPI);

    MongoClient mongoClient = new MongoClient(new ServerAddress(server), Arrays.asList(credential));

Note that with Kerberos you specify neither the password not the database name.

To actually run a program that authenticates with Kerberos, you typically will need to specify several 
system properties so that the underlying GSSAPI Java libraries can aquire a Kerberos ticket:

.. code-block:: properties

    javax.security.auth.useSubjectCredsOnly=false 
    java.security.krb5.realm=MYREALM.ME
    java.security.krb5.kdc=mykdc.myrealm.me

Note that currently this has been successfully tested on Linux only.
