=====================================================================
Client-Side Field Level Encryption: Use a KMS to Store the Master Key
=====================================================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _fle-convert-to-a-remote-master-key:

Introduction
------------

This guide shows you how to migrate from using Client-Side Field
Level Encryption (CSFLE) with a **locally-managed master key** to one that
uses a remote **Key Management Service** (KMS) and is intended for
**full-stack developers**.

Currently, MongoDB drivers support the following Key Management Providers:

- `Amazon Web Services KMS <https://aws.amazon.com/kms/>`__
- `Azure Key Vault <https://azure.microsoft.com/en-us/services/key-vault/>`__
- `Google Cloud Platform Key Management <https://cloud.google.com/security-key-management>`__
- Local KMS provider

Prerequisites
-------------

This guide requires that you completed the following:

- created a CSFLE-enabled client using our `CSFLE guide </security/client-side-field-level-encryption-guide>`_
- configured appropriate permissions to the MongoDB replica set
- set up a Customer Master Key (CMK) on one of the supported remote KMS
  providers

Reasons to Use a Remote KMS
---------------------------

Using a remote KMS for master key management has the following advantages over
using a master key on the local filesystem:

- Secure storage of the key with access auditing
- Reduced risk of access permission issues
- Availability and distribution of the key to remote clients
- Automated key backup and recovery
- Centralized encryption key lifecycle management

Additionally, MongoDB trasmits the data encryption keys to the KMS for
encryption and decryption, ensuring the Customer Master Key (CMK) is never
exposed to the client.

Convert to a Remote Master Key
------------------------------

.. warning:: Decrypt all encrypted field data first

   Before you switch from a locally-managed master key to a remote KMS,
   you must decrypt all documents containing field-encrypted data if you
   want to keep it. Your existing data encryption keys can only be decrypted
   with the original locally-managed master key and not the CMK that the
   KMS generates.

   Failure to decrypt all data at this stage may cause permanent and
   unrecoverable data loss.

This following steps explain the setup and updates necessary to move from
a local key provider to a KMS. Select the tab that corresponds to your 
provider:

.. tabs::


   .. tab::
      :tabid: AWS KMS

      .. include:: /includes/steps/fle-convert-to-a-remote-master-key-aws.rst
      
      :tabid: Azure Key Vault

      .. include:: /includes/steps/fle-convert-to-a-remote-master-key-azure.rst
      
      :tabid: Google Cloud Key Management

      .. include:: /includes/steps/fle-convert-to-a-remote-master-key-gcp.rst
      
For more information on client-side field level encryption in MongoDB,
check out the reference documentation in the MongoDB server manual:

- :manual:`Client-Side Field Level Encryption </core/security-client-side-encryption>`
- :manual:`Automatic Encryption JSON Schema Syntax </reference/security-client-side-automatic-json-schema>`
- :manual:`Manage Client-Side Encryption Data Keys </tutorial/manage-client-side-encryption-data-keys>`
