.. _scala:

.. include:: /includes/unicode-checkmark.rst

====================
MongoDB Scala Driver
====================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: twocols

Introduction
------------

Welcome to the documentation site for the official MongoDB Scala 
driver. You can add the driver to your application to work 
asynchronously with MongoDB in Scala. Download it using 
`sbt <https://www.scala-sbt.org/>`__ or 
`Apache Maven <https://maven.apache.org/>`__, or set up a runnable 
project by following our tutorials.

- :java-docs:`Reference Documentation <driver-scala/>`

- :java-docs:`Tutorials <driver-scala/tutorials/>`

- :java-docs:`API Documentation <apidocs/>`

- :java-docs:`What's New <whats-new/>`

- `Source Code <https://github.com/mongodb/mongo-java-driver/tree/master/driver-scala>`__


Installation
------------

The recommended way to get started using the driver in your project is
with a dependency management system like ``sbt`` or ``maven``. See the
:java-docs:`Installation Guide <driver-scala/getting-started/installation/>`
for more information.

.. _connect-atlas-scala-driver:

Connect to MongoDB Atlas
------------------------

.. include:: /includes/atlas-connect-blurb.rst

.. code-block:: scala

   import org.mongodb.scala._

   // ...

   // Replace the uri string with your MongoDB deployment's connection string.
   val uri: String = "mongodb+srv://<username>:<password>@<cluster-address>/test?retryWrites=true&w=majority"
   System.setProperty("org.mongodb.async.type", "netty")
   val client: MongoClient = MongoClient(uri)
   val db: MongoDatabase = client.getDatabase("test")

.. include:: /includes/serverless-compatibility.rst

See our guide on :java-docs:`Connecting <driver-scala/tutorials/connect-to-mongodb/>`
for more ways to connect.

Versioned API
-------------

You can use the `Versioned API <https://docs.mongodb.com/v5.0/reference/versioned-api/>`__
feature starting with MongoDB Server version 5.0 and Scala Driver version 4.3.
When you use the Versioned API feature, you can update your driver or server
without worrying about backward compatibility issues with any commands covered
by the Versioned API. To use this feature, construct a MongoDB client
instance, specifying a version of the Versioned API:

.. literalinclude:: /includes/versioned-api-snippets/scala-client.scala
   :language: scala

Connect to a MongoDB Server on Your Local Machine
-------------------------------------------------

.. include:: /includes/localhost-connection.rst

To test whether you can connect to your server, replace the connection
string in the :ref:`Connect to MongoDB Atlas <connect-atlas-scala-driver>` code
example and run it.

Compatibility
-------------

MongoDB Compatibility
~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/scala-driver-compatibility-matrix-mongodb.rst

.. include:: /includes/mongodb-compatibility-table-scala.rst

.. include:: /includes/older-server-versions-unsupported.rst

Language Compatibility
~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/scala-driver-compatibility-matrix-language.rst

.. include:: /includes/language-compatibility-table-scala.rst

.. include:: /includes/about-driver-compatibility.rst

.. include:: /includes/help-links-scala.rst
