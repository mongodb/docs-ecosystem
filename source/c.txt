.. _c-language-center:

.. include:: /includes/unicode-checkmark.rst

================
MongoDB C Driver
================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: twocols

Introduction
------------

The MongoDB C Driver, also known as “libmongoc”, is the official client library
for C applications, and provides a base for MongoDB drivers in higher-level
languages.

The library is compatible with all major platforms. It depends on libbson
to create and parse BSON data.

- `Tutorial <http://mongoc.org/libmongoc/current/tutorial.html>`__

- `Usage Guide <http://mongoc.org/libmongoc/current/index.html>`__

- `API Reference <http://mongoc.org/libmongoc/current/api.html>`_

- `Changelog <https://github.com/mongodb/mongo-c-driver/releases>`__

- `Source Code <https://github.com/mongodb/mongo-c-driver>`__


Installation
------------

See `Installing the MongoDB C Driver (libmongoc) and BSON library (libbson)
<http://mongoc.org/libmongoc/current/installing.html>`__.


Connect to MongoDB Atlas
------------------------

.. include:: /includes/atlas-connect-blurb.rst

.. code-block:: c

   #include <mongoc/mongoc.h>

   int
   main (int argc, char *argv[])
   {
      mongoc_database_t *database;
      mongoc_client_t *client;

      mongoc_init ();

      // Replace the uri string with your MongoDB deployment's connection string.
      client = mongoc_client_new(
         "mongodb+srv://<username>:<password>@<cluster-url>/test?retryWrites=true&w=majority"
      );
      database = mongoc_client_get_database (client, "test");

      mongoc_database_destroy (database);
      mongoc_client_destroy (client);

      mongoc_cleanup ();

      return 0;
   }

See `Advanced Connections <http://mongoc.org/libmongoc/current/advanced-connections.html>`__
for more ways to connect.

Versioned API
-------------

Starting with MongoDB 5.0 and C Driver Version 1.18, you can configure your MongoDB client
instance to use the Versioned API. The Versioned API maintains backwards
compatibility, which means that you can deploy your app and upgrade your MongoDB
server without changing any code or updating your driver. To use the
Versioned API, use the
:atlas:`Atlas connection string </driver-connection>` for your cluster
and specify the API Version:

.. code-block:: c

   // Replace the uri string with your MongoDB deployment's connection string.
   const char *uri_string = "mongodb+srv://<username>:<password>@<cluster-url>/test?w=majority";
   mongoc_uri_t *uri;
   mongoc_client_t *client;
   mongoc_server_api_t *api;
   bson_error_t error;

   mongoc_init ();

   uri = mongoc_uri_new_with_error (uri_string, &error);
   client = mongoc_client_new_from_uri (uri);

   // Set the versioned API version on the client.
   api = mongoc_server_api_new (MONGOC_SERVER_API_V1);
   mongoc_client_set_server_api (client, api, &error);

Connect to ``localhost``
------------------------

.. include:: /includes/localhost-connection.rst

Compatibility
-------------

MongoDB Compatibility
~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/c-driver-compatibility-matrix-mongodb.rst

.. include:: /includes/mongodb-compatibility-table-c.rst

.. include:: /includes/older-server-versions-unsupported.rst

Language Compatibility
~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/c-driver-compatibility-matrix-language.rst

.. include:: /includes/language-compatibility-table-c.rst

.. include:: /includes/about-driver-compatibility.rst

.. include:: /includes/help-links-c.rst
